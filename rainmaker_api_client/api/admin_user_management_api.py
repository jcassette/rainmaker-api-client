# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class AdminUserManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_user_with_privileges(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user  # noqa: E501

        This API creates a new user. Only Email is supported as user name. Here the role is disjoint of the flags the user need to explicitly assign the required role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_with_privileges(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for creating new user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_with_privileges_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_with_privileges_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def create_user_with_privileges_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user  # noqa: E501

        This API creates a new user. Only Email is supported as user name. Here the role is disjoint of the flags the user need to explicitly assign the required role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_with_privileges_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for creating new user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_with_privileges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_user_with_privileges`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `create_user_with_privileges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user_with_privileges2(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user in user email mobile user pool  # noqa: E501

        This API creates a new user in user email mobile user pool. Only Email is supported as user name. Here the role is disjoint of the flags the user need to explicitly assign the required role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_with_privileges2(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for creating new user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_with_privileges2_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_with_privileges2_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def create_user_with_privileges2_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user in user email mobile user pool  # noqa: E501

        This API creates a new user in user email mobile user pool. Only Email is supported as user name. Here the role is disjoint of the flags the user need to explicitly assign the required role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_with_privileges2_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for creating new user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_with_privileges2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_user_with_privileges2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `create_user_with_privileges2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user(self, version, user_name, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by admin-users to delete other users account. Here are the details- <ul> <li>If the 'request' query param is true, user delete request is initiated and verification code is sent to the invoking user email. <li>If 'verification_code' query param is specified, user account is deleted. <li>The 'super_admin' flag has higher priority over 'admin' flag.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user(version, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user who needs to be deleted (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_with_http_info(version, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_with_http_info(version, user_name, **kwargs)  # noqa: E501
            return data

    def delete_user_with_http_info(self, version, user_name, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by admin-users to delete other users account. Here are the details- <ul> <li>If the 'request' query param is true, user delete request is initiated and verification code is sent to the invoking user email. <li>If 'verification_code' query param is specified, user account is deleted. <li>The 'super_admin' flag has higher priority over 'admin' flag.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_with_http_info(version, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user who needs to be deleted (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'user_name', 'request', 'verification_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_user`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `delete_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501
        if 'verification_code' in params:
            query_params.append(('verification_code', params['verification_code']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('user_name', params['user_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user2(self, version, user_name, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by admin-users to delete other users account. Here are the details- <ul> <li>If the 'request' query param is true, user delete request is initiated and verification code is sent to the invoking user email. <li>If 'verification_code' query param is specified, user account is deleted. <li>The 'super_admin' flag has higher priority over 'admin' flag.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user2(version, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user who needs to be deleted (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user2_with_http_info(version, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user2_with_http_info(version, user_name, **kwargs)  # noqa: E501
            return data

    def delete_user2_with_http_info(self, version, user_name, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by admin-users to delete other users account. Here are the details- <ul> <li>If the 'request' query param is true, user delete request is initiated and verification code is sent to the invoking user email. <li>If 'verification_code' query param is specified, user account is deleted. <li>The 'super_admin' flag has higher priority over 'admin' flag.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user2_with_http_info(version, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user who needs to be deleted (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'user_name', 'request', 'verification_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_user2`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `delete_user2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501
        if 'verification_code' in params:
            query_params.append(('verification_code', params['verification_code']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('user_name', params['user_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user2', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users(self, version, **kwargs):  # noqa: E501
        """Fetches the details of a user  # noqa: E501

        This API fetches all the internal users by default. If user name is provided then user_id, user_name, super_admin flag, quota, user roles, URL of profile picture and name of that user is returned. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user whose details are to be fetched.
        :param str start_id: use next_id from the response as start_id to fetch the next set of records. A combination of userID and user name.
        :param str num_records: number of users to fetch
        :return: GetInternalUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_users_with_http_info(self, version, **kwargs):  # noqa: E501
        """Fetches the details of a user  # noqa: E501

        This API fetches all the internal users by default. If user name is provided then user_id, user_name, super_admin flag, quota, user roles, URL of profile picture and name of that user is returned. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user whose details are to be fetched.
        :param str start_id: use next_id from the response as start_id to fetch the next set of records. A combination of userID and user name.
        :param str num_records: number of users to fetch
        :return: GetInternalUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'user_name', 'start_id', 'num_records']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'user_name' in params:
            query_params.append(('user_name', params['user_name']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInternalUsers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users2(self, version, **kwargs):  # noqa: E501
        """Fetches the details of a user  # noqa: E501

        This API fetches all the internal users by default. If user name is provided then user_id, user_name, super_admin flag, quota, user roles, URL of profile picture and name of that user is returned. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users2(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user whose details are to be fetched.
        :param str start_id: use next_id from the response as start_id to fetch the next set of records. A combination of userID and user name.
        :param str num_records: number of users to fetch
        :return: GetInternalUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users2_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users2_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_users2_with_http_info(self, version, **kwargs):  # noqa: E501
        """Fetches the details of a user  # noqa: E501

        This API fetches all the internal users by default. If user name is provided then user_id, user_name, super_admin flag, quota, user roles, URL of profile picture and name of that user is returned. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users2_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_name: user_name of the user whose details are to be fetched.
        :param str start_id: use next_id from the response as start_id to fetch the next set of records. A combination of userID and user name.
        :param str num_records: number of users to fetch
        :return: GetInternalUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'user_name', 'start_id', 'num_records']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_users2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'user_name' in params:
            query_params.append(('user_name', params['user_name']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInternalUsers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_privileges(self, body, version, **kwargs):  # noqa: E501
        """Updates the user  # noqa: E501

        This API updates the permissions and quota of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_privileges(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for updating name of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_privileges_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_privileges_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def update_user_privileges_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Updates the user  # noqa: E501

        This API updates the permissions and quota of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_privileges_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for updating name of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_privileges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_privileges`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_user_privileges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_privileges2(self, body, version, **kwargs):  # noqa: E501
        """Updates the user in user email mobile user pool  # noqa: E501

        This API updates the permissions and quota of the user in user email mobile user pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_privileges2(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for updating name of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_privileges2_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_privileges2_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def update_user_privileges2_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Updates the user in user email mobile user pool  # noqa: E501

        This API updates the permissions and quota of the user in user email mobile user pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_privileges2_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateUserAdminRequest body: Request body for updating name of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_privileges2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_privileges2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_user_privileges2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user2', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
