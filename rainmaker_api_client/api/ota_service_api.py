# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class OTAServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adminuploadotaimage(self, body, version, **kwargs):  # noqa: E501
        """This API is used for uploading a new Firmware image  # noqa: E501

        This API uploads the new Firmware image to Rainmaker Cloud.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adminuploadotaimage(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OtaImageCreateRequest body: Request body for uploading new firmware image. List of optional parameters <ul> <li>fw_version</li> <li>model</li> <li>type</li> </ul> <h3>These above parameters will be fetched from base64_fwimage when not passed in request body.<br> If absent in both places then error will be returned.</h3> (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: OtaImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adminuploadotaimage_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.adminuploadotaimage_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def adminuploadotaimage_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API is used for uploading a new Firmware image  # noqa: E501

        This API uploads the new Firmware image to Rainmaker Cloud.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adminuploadotaimage_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OtaImageCreateRequest body: Request body for uploading new firmware image. List of optional parameters <ul> <li>fw_version</li> <li>model</li> <li>type</li> </ul> <h3>These above parameters will be fetched from base64_fwimage when not passed in request body.<br> If absent in both places then error will be returned.</h3> (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: OtaImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adminuploadotaimage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adminuploadotaimage`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `adminuploadotaimage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otaimage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OtaImageCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def archive_or_unarchive_ota_image(self, version, ota_image_id, archive, **kwargs):  # noqa: E501
        """Archive/Unarchive an OTA image  # noqa: E501

        This API archives/unarchives the OTA image for the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_or_unarchive_ota_image(version, ota_image_id, archive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_image_id: OTA image id (required)
        :param bool archive: Archives the image when true and unarchives the image when false (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.archive_or_unarchive_ota_image_with_http_info(version, ota_image_id, archive, **kwargs)  # noqa: E501
        else:
            (data) = self.archive_or_unarchive_ota_image_with_http_info(version, ota_image_id, archive, **kwargs)  # noqa: E501
            return data

    def archive_or_unarchive_ota_image_with_http_info(self, version, ota_image_id, archive, **kwargs):  # noqa: E501
        """Archive/Unarchive an OTA image  # noqa: E501

        This API archives/unarchives the OTA image for the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_or_unarchive_ota_image_with_http_info(version, ota_image_id, archive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_image_id: OTA image id (required)
        :param bool archive: Archives the image when true and unarchives the image when false (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'ota_image_id', 'archive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_or_unarchive_ota_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `archive_or_unarchive_ota_image`")  # noqa: E501
        # verify the required parameter 'ota_image_id' is set
        if ('ota_image_id' not in params or
                params['ota_image_id'] is None):
            raise ValueError("Missing the required parameter `ota_image_id` when calling `archive_or_unarchive_ota_image`")  # noqa: E501
        # verify the required parameter 'archive' is set
        if ('archive' not in params or
                params['archive'] is None):
            raise ValueError("Missing the required parameter `archive` when calling `archive_or_unarchive_ota_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'ota_image_id' in params:
            query_params.append(('ota_image_id', params['ota_image_id']))  # noqa: E501
        if 'archive' in params:
            query_params.append(('archive', params['archive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otaimage', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_or_archive_ota_job(self, body, version, **kwargs):  # noqa: E501
        """Cancel/Archive an OTA job  # noqa: E501

        This API cancels/archives OTA job. The user needs to specify the OTA Job Id and archive flag in request body. <br><b>NOTE: An OTA Job can be archived only when it is in canceled state.</b>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_or_archive_ota_job(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OtaJobCancelRequest body: Request body for cancelling/archiving OTA Job (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: OTACancelJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_or_archive_ota_job_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_or_archive_ota_job_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def cancel_or_archive_ota_job_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Cancel/Archive an OTA job  # noqa: E501

        This API cancels/archives OTA job. The user needs to specify the OTA Job Id and archive flag in request body. <br><b>NOTE: An OTA Job can be archived only when it is in canceled state.</b>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_or_archive_ota_job_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OtaJobCancelRequest body: Request body for cancelling/archiving OTA Job (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: OTACancelJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_or_archive_ota_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cancel_or_archive_ota_job`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `cancel_or_archive_ota_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otajob', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OTACancelJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def createotajob(self, body, version, **kwargs):  # noqa: E501
        """This API creates a new OTA job  # noqa: E501

        This API creates a new OTA job. The user needs to specify the OTA Image ID, Job name, nodes and/or groups. Currently, the OTA update can be pushed for upto 100 nodes and/or 10 groups of nodes or all claimed nodes (Group:FFFF-FFFF) in a single request. For pushing the OTA Update to a group of nodes, the **groups** parameter must be filled with a list of group IDs. For pushing the OTA update to all the claimed nodes, user needs to specify the group_id as **FFFF-FFFF** <br><b>NOTE: The OTA image must have unarchived status.</b>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.createotajob(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OtaJobCreateRequest body: Request body for creating a new OTA Job (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str force_push: Force push OTA image
        :param str user_approval: If true, OTA can be pushed to node by end users
        :param str notify: Indicates if end user should be notified about OTA job
        :return: OtaJobCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.createotajob_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.createotajob_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def createotajob_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API creates a new OTA job  # noqa: E501

        This API creates a new OTA job. The user needs to specify the OTA Image ID, Job name, nodes and/or groups. Currently, the OTA update can be pushed for upto 100 nodes and/or 10 groups of nodes or all claimed nodes (Group:FFFF-FFFF) in a single request. For pushing the OTA Update to a group of nodes, the **groups** parameter must be filled with a list of group IDs. For pushing the OTA update to all the claimed nodes, user needs to specify the group_id as **FFFF-FFFF** <br><b>NOTE: The OTA image must have unarchived status.</b>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.createotajob_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OtaJobCreateRequest body: Request body for creating a new OTA Job (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str force_push: Force push OTA image
        :param str user_approval: If true, OTA can be pushed to node by end users
        :param str notify: Indicates if end user should be notified about OTA job
        :return: OtaJobCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version', 'force_push', 'user_approval', 'notify']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createotajob" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `createotajob`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `createotajob`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'force_push' in params:
            query_params.append(('force_push', params['force_push']))  # noqa: E501
        if 'user_approval' in params:
            query_params.append(('user_approval', params['user_approval']))  # noqa: E501
        if 'notify' in params:
            query_params.append(('notify', params['notify']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otajob', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OtaJobCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ota_image(self, version, ota_image_id, **kwargs):  # noqa: E501
        """Delete the  OTA Image for the user  # noqa: E501

        This API deletes the OTA image for the user, if it is not used in any of the OTA jobs. If the OTA image is used in any of the OTA jobs, an error is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ota_image(version, ota_image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_image_id: OTA Image Id (required)
        :param str force_delete: Delete the OTA Image forcefully (Even if it is associated with any cancelled OTA Job)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ota_image_with_http_info(version, ota_image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ota_image_with_http_info(version, ota_image_id, **kwargs)  # noqa: E501
            return data

    def delete_ota_image_with_http_info(self, version, ota_image_id, **kwargs):  # noqa: E501
        """Delete the  OTA Image for the user  # noqa: E501

        This API deletes the OTA image for the user, if it is not used in any of the OTA jobs. If the OTA image is used in any of the OTA jobs, an error is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ota_image_with_http_info(version, ota_image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_image_id: OTA Image Id (required)
        :param str force_delete: Delete the OTA Image forcefully (Even if it is associated with any cancelled OTA Job)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'ota_image_id', 'force_delete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ota_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_ota_image`")  # noqa: E501
        # verify the required parameter 'ota_image_id' is set
        if ('ota_image_id' not in params or
                params['ota_image_id'] is None):
            raise ValueError("Missing the required parameter `ota_image_id` when calling `delete_ota_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'ota_image_id' in params:
            query_params.append(('ota_image_id', params['ota_image_id']))  # noqa: E501
        if 'force_delete' in params:
            query_params.append(('force_delete', params['force_delete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otaimage', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ota_image(self, version, **kwargs):  # noqa: E501
        """Get the details about OTA images for the user  # noqa: E501

        This API gives the details about the OTA image. If the ota_image_id or the ota_image_name is not specified, all the images for the user are returned. <li>If contains flag is set to true, pattern search will be applied on image_name specified.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_image(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_image_id: OTA Image Id
        :param str image_name: OTA Image Name
        :param str type: OTA Image Type
        :param str model: OTA Image Model
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :param bool contains: For pattern search on image_name
        :param bool archived: If set to true, will return only archived OTA images
        :param bool all: If set to true, will return all images irrespective of archived status
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ota_image_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ota_image_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_ota_image_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get the details about OTA images for the user  # noqa: E501

        This API gives the details about the OTA image. If the ota_image_id or the ota_image_name is not specified, all the images for the user are returned. <li>If contains flag is set to true, pattern search will be applied on image_name specified.</li>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_image_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_image_id: OTA Image Id
        :param str image_name: OTA Image Name
        :param str type: OTA Image Type
        :param str model: OTA Image Model
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :param bool contains: For pattern search on image_name
        :param bool archived: If set to true, will return only archived OTA images
        :param bool all: If set to true, will return all images irrespective of archived status
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'ota_image_id', 'image_name', 'type', 'model', 'num_records', 'start_id', 'contains', 'archived', 'all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ota_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_ota_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'ota_image_id' in params:
            query_params.append(('ota_image_id', params['ota_image_id']))  # noqa: E501
        if 'image_name' in params:
            query_params.append(('image_name', params['image_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'contains' in params:
            query_params.append(('contains', params['contains']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'all' in params:
            query_params.append(('all', params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otaimage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ota_job(self, version, **kwargs):  # noqa: E501
        """Get the details about OTA jobs for the user  # noqa: E501

        This API provides the details about the OTA job created by the user. <ol><li>If the user specifies <b>ota_job_id</b> or <b>ota_job_name</b>, then the details about the specific job are returned. In case of ota_job_name all jobs which contain the pattern are returned.</li> <li>If <b>ota_image_id</b> is provided then the latest ota job that is not archived by the user with that image id will be returned and if <b>archived</b> is set as true then latest ota job that is archived by the user with that image id will be returned </li> <li>If <b>archived</b> is provided as true, then the all ota job that are archived by the user will be returned</li> <li>If <b>all</b> is provided as true, then all the OTA jobs created by the user are returned</li> <li>else the details about all the OTA jobs that have been created by the user and are not archived will be returned.</li></ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_job(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_job_id: OTA Job Id
        :param str ota_job_name: OTA Job name - Pattern
        :param str ota_image_id: OTA Image Id
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :param bool archived: Flag to get archived ota jobs. [Valid values are true/false]
        :param bool all: Flag to get all the ota jobs irrespective whether a job is archived or not. [Valid values are true/false]
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ota_job_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ota_job_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_ota_job_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get the details about OTA jobs for the user  # noqa: E501

        This API provides the details about the OTA job created by the user. <ol><li>If the user specifies <b>ota_job_id</b> or <b>ota_job_name</b>, then the details about the specific job are returned. In case of ota_job_name all jobs which contain the pattern are returned.</li> <li>If <b>ota_image_id</b> is provided then the latest ota job that is not archived by the user with that image id will be returned and if <b>archived</b> is set as true then latest ota job that is archived by the user with that image id will be returned </li> <li>If <b>archived</b> is provided as true, then the all ota job that are archived by the user will be returned</li> <li>If <b>all</b> is provided as true, then all the OTA jobs created by the user are returned</li> <li>else the details about all the OTA jobs that have been created by the user and are not archived will be returned.</li></ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_job_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_job_id: OTA Job Id
        :param str ota_job_name: OTA Job name - Pattern
        :param str ota_image_id: OTA Image Id
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :param bool archived: Flag to get archived ota jobs. [Valid values are true/false]
        :param bool all: Flag to get all the ota jobs irrespective whether a job is archived or not. [Valid values are true/false]
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'ota_job_id', 'ota_job_name', 'ota_image_id', 'num_records', 'start_id', 'archived', 'all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ota_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_ota_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'ota_job_id' in params:
            query_params.append(('ota_job_id', params['ota_job_id']))  # noqa: E501
        if 'ota_job_name' in params:
            query_params.append(('ota_job_name', params['ota_job_name']))  # noqa: E501
        if 'ota_image_id' in params:
            query_params.append(('ota_image_id', params['ota_image_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'all' in params:
            query_params.append(('all', params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otajob', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ota_job_status(self, version, ota_job_id, **kwargs):  # noqa: E501
        """This API provides status of the the OTA job  # noqa: E501

        This API provides the status of the OTA job. It provides the details about the OTA job and the latest OTA status for the nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_job_status(version, ota_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_job_id: OTA Job Id (required)
        :param str node_id: node Id
        :param bool summary: OTA Job summary
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :return: OtaJobNodeStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ota_job_status_with_http_info(version, ota_job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ota_job_status_with_http_info(version, ota_job_id, **kwargs)  # noqa: E501
            return data

    def get_ota_job_status_with_http_info(self, version, ota_job_id, **kwargs):  # noqa: E501
        """This API provides status of the the OTA job  # noqa: E501

        This API provides the status of the OTA job. It provides the details about the OTA job and the latest OTA status for the nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_job_status_with_http_info(version, ota_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_job_id: OTA Job Id (required)
        :param str node_id: node Id
        :param bool summary: OTA Job summary
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :return: OtaJobNodeStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'ota_job_id', 'node_id', 'summary', 'num_records', 'start_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ota_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_ota_job_status`")  # noqa: E501
        # verify the required parameter 'ota_job_id' is set
        if ('ota_job_id' not in params or
                params['ota_job_id'] is None):
            raise ValueError("Missing the required parameter `ota_job_id` when calling `get_ota_job_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'ota_job_id' in params:
            query_params.append(('ota_job_id', params['ota_job_id']))  # noqa: E501
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'summary' in params:
            query_params.append(('summary', params['summary']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otajob/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OtaJobNodeStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ota_job_status_summary(self, version, ota_job_id, **kwargs):  # noqa: E501
        """This API provides summary of the the OTA job  # noqa: E501

        This API provides the summary of the OTA job. It provides the count of nodes with various OTA status -  **triggered, in_progress, success, failed and the total count**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_job_status_summary(version, ota_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_job_id: OTA Job Id (required)
        :return: OtaJobSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ota_job_status_summary_with_http_info(version, ota_job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ota_job_status_summary_with_http_info(version, ota_job_id, **kwargs)  # noqa: E501
            return data

    def get_ota_job_status_summary_with_http_info(self, version, ota_job_id, **kwargs):  # noqa: E501
        """This API provides summary of the the OTA job  # noqa: E501

        This API provides the summary of the OTA job. It provides the count of nodes with various OTA status -  **triggered, in_progress, success, failed and the total count**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ota_job_status_summary_with_http_info(version, ota_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str ota_job_id: OTA Job Id (required)
        :return: OtaJobSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'ota_job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ota_job_status_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_ota_job_status_summary`")  # noqa: E501
        # verify the required parameter 'ota_job_id' is set
        if ('ota_job_id' not in params or
                params['ota_job_id'] is None):
            raise ValueError("Missing the required parameter `ota_job_id` when calling `get_ota_job_status_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'ota_job_id' in params:
            query_params.append(('ota_job_id', params['ota_job_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otajob/status/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OtaJobSummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getnodeotastatus(self, version, node_id, ota_job_id, **kwargs):  # noqa: E501
        """Get latest status of OTA update for the node associated with the user  # noqa: E501

        Using this API the end user can check the latest status of the OTA Job, for node which is associated with his account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getnodeotastatus(version, node_id, ota_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id (required)
        :param str ota_job_id: OTA Job Id (required)
        :return: UserGetOtaStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getnodeotastatus_with_http_info(version, node_id, ota_job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getnodeotastatus_with_http_info(version, node_id, ota_job_id, **kwargs)  # noqa: E501
            return data

    def getnodeotastatus_with_http_info(self, version, node_id, ota_job_id, **kwargs):  # noqa: E501
        """Get latest status of OTA update for the node associated with the user  # noqa: E501

        Using this API the end user can check the latest status of the OTA Job, for node which is associated with his account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getnodeotastatus_with_http_info(version, node_id, ota_job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id (required)
        :param str ota_job_id: OTA Job Id (required)
        :return: UserGetOtaStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'node_id', 'ota_job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getnodeotastatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `getnodeotastatus`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `getnodeotastatus`")  # noqa: E501
        # verify the required parameter 'ota_job_id' is set
        if ('ota_job_id' not in params or
                params['ota_job_id'] is None):
            raise ValueError("Missing the required parameter `ota_job_id` when calling `getnodeotastatus`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'ota_job_id' in params:
            query_params.append(('ota_job_id', params['ota_job_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/ota_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserGetOtaStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getotaupdate(self, version, node_id, **kwargs):  # noqa: E501
        """Get latest OTA update for the node associated with the user  # noqa: E501

        Using this API the end user can check if there is any OTA update, for the node which is associated with his account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getotaupdate(version, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id (required)
        :return: UserOTAUpdateRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getotaupdate_with_http_info(version, node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getotaupdate_with_http_info(version, node_id, **kwargs)  # noqa: E501
            return data

    def getotaupdate_with_http_info(self, version, node_id, **kwargs):  # noqa: E501
        """Get latest OTA update for the node associated with the user  # noqa: E501

        Using this API the end user can check if there is any OTA update, for the node which is associated with his account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getotaupdate_with_http_info(version, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id (required)
        :return: UserOTAUpdateRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getotaupdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `getotaupdate`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `getotaupdate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/ota_update', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserOTAUpdateRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def o_ta_image_upload_confirm_url(self, body, version, **kwargs):  # noqa: E501
        """This API is used to confirm the upload Firmware image.  # noqa: E501

        After the admin uploads the OTA image to S3 bucket, this API needs to be called. It is expected that the admin will upload the OTA image binary separately using a suitable tool with the help of the pre-signed upload URL returned by the <b>GET: /admin/otaimage/upload_request</b>. <br><ul> <li><b>fw_version</b> and <b>model</b> should be provided if not present in the uploaded OTA image binary. It can also be used to override the binary <b>fw_version</b> and <b>model</b>. <li>It returns the S3 URL of the OTA image.</li> <li>If you have uploaded an invalid OTA Image file, it will be deleted completely. You will have to reupload a valid one on the <b>upload_url</b> again.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_ta_image_upload_confirm_url(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OTAImageUploadConfirmRequest body: Request body for confirming OTA image upload (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: OtaImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.o_ta_image_upload_confirm_url_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.o_ta_image_upload_confirm_url_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def o_ta_image_upload_confirm_url_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API is used to confirm the upload Firmware image.  # noqa: E501

        After the admin uploads the OTA image to S3 bucket, this API needs to be called. It is expected that the admin will upload the OTA image binary separately using a suitable tool with the help of the pre-signed upload URL returned by the <b>GET: /admin/otaimage/upload_request</b>. <br><ul> <li><b>fw_version</b> and <b>model</b> should be provided if not present in the uploaded OTA image binary. It can also be used to override the binary <b>fw_version</b> and <b>model</b>. <li>It returns the S3 URL of the OTA image.</li> <li>If you have uploaded an invalid OTA Image file, it will be deleted completely. You will have to reupload a valid one on the <b>upload_url</b> again.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_ta_image_upload_confirm_url_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OTAImageUploadConfirmRequest body: Request body for confirming OTA image upload (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: OtaImageCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_ta_image_upload_confirm_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `o_ta_image_upload_confirm_url`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `o_ta_image_upload_confirm_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otaimage/upload_confirm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OtaImageCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def o_ta_image_upload_request_url(self, version, image_name, **kwargs):  # noqa: E501
        """Get pre-signed url to upload the firmware image to S3  # noqa: E501

        This API is used to fetch presigned upload_url (<b>Validity:</b> 1 hour) to upload the firmware image. <br><br>The user needs to specify the OTA <b>image_name</b>. This <b>image_name</b> is independent of the firmware image binary file name.  <br><br><b>Note:</b><ul><li>If already existing OTA <b>image_name</b> is given and the OTA image is not referenced by any OTA job, it will be replaced. This action cannot be undone.</li><li> The client will have to send a PUT HTTP request to the <b>upload_url</b> with headers -<br> ```'Content-type': 'application/octet-stream','x-amz-acl': 'public-read'```</li><li> If <b>upload_url</b> is expired you will get a <b>403 Forbidden</b> response. You may fetch a new <b>upload_url</b>.</li><li>Maximum supported OTA Image size is <font color='red'>16 MB</font>.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_ta_image_upload_request_url(version, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str image_name: Name of the OTA firmware image to be uploaded (required)
        :return: GetUploadOTAImagePreSignedUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.o_ta_image_upload_request_url_with_http_info(version, image_name, **kwargs)  # noqa: E501
        else:
            (data) = self.o_ta_image_upload_request_url_with_http_info(version, image_name, **kwargs)  # noqa: E501
            return data

    def o_ta_image_upload_request_url_with_http_info(self, version, image_name, **kwargs):  # noqa: E501
        """Get pre-signed url to upload the firmware image to S3  # noqa: E501

        This API is used to fetch presigned upload_url (<b>Validity:</b> 1 hour) to upload the firmware image. <br><br>The user needs to specify the OTA <b>image_name</b>. This <b>image_name</b> is independent of the firmware image binary file name.  <br><br><b>Note:</b><ul><li>If already existing OTA <b>image_name</b> is given and the OTA image is not referenced by any OTA job, it will be replaced. This action cannot be undone.</li><li> The client will have to send a PUT HTTP request to the <b>upload_url</b> with headers -<br> ```'Content-type': 'application/octet-stream','x-amz-acl': 'public-read'```</li><li> If <b>upload_url</b> is expired you will get a <b>403 Forbidden</b> response. You may fetch a new <b>upload_url</b>.</li><li>Maximum supported OTA Image size is <font color='red'>16 MB</font>.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_ta_image_upload_request_url_with_http_info(version, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str image_name: Name of the OTA firmware image to be uploaded (required)
        :return: GetUploadOTAImagePreSignedUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'image_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_ta_image_upload_request_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `o_ta_image_upload_request_url`")  # noqa: E501
        # verify the required parameter 'image_name' is set
        if ('image_name' not in params or
                params['image_name'] is None):
            raise ValueError("Missing the required parameter `image_name` when calling `o_ta_image_upload_request_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'image_name' in params:
            query_params.append(('image_name', params['image_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/otaimage/upload_request', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUploadOTAImagePreSignedUrlResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postotaupdate(self, version, **kwargs):  # noqa: E501
        """Push OTA update to the node  # noqa: E501

        Using this API the end user can push OTA update to the node which is associated with his account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postotaupdate(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param UserPushOtaUpdateRequest body: Request body for uploading new firmware image. ota_job_id and node_id are required parameters.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postotaupdate_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.postotaupdate_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def postotaupdate_with_http_info(self, version, **kwargs):  # noqa: E501
        """Push OTA update to the node  # noqa: E501

        Using this API the end user can push OTA update to the node which is associated with his account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postotaupdate_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param UserPushOtaUpdateRequest body: Request body for uploading new firmware image. ota_job_id and node_id are required parameters.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postotaupdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `postotaupdate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/ota_update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def useruploadotaimage(self, body, version, **kwargs):  # noqa: E501
        """API for the end user to upload a new firmware image  # noqa: E501

        Using this API end user can upload a new firmware image. Using image url received in the response, the user can push the OTA for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.useruploadotaimage(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserOTAImageRequest body: Request body for uploading new firmware image. type is optional parameter. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: UserOTAImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.useruploadotaimage_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.useruploadotaimage_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def useruploadotaimage_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """API for the end user to upload a new firmware image  # noqa: E501

        Using this API end user can upload a new firmware image. Using image url received in the response, the user can push the OTA for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.useruploadotaimage_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserOTAImageRequest body: Request body for uploading new firmware image. type is optional parameter. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: UserOTAImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method useruploadotaimage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `useruploadotaimage`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `useruploadotaimage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/otaimage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserOTAImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
