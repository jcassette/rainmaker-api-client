# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def forgotpassword(self, body, version, **kwargs):  # noqa: E501
        """Handle forgot password request from the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotpassword(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionForgotpasswordBody body: password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.forgotpassword_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.forgotpassword_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def forgotpassword_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Handle forgot password request from the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotpassword_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionForgotpasswordBody body: password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forgotpassword" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `forgotpassword`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `forgotpassword`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/forgotpassword', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forgotpassword_mobile(self, body, version, **kwargs):  # noqa: E501
        """Handle forgot password request from the user  # noqa: E501

        This api handles forgot password request from the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotpassword_mobile(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionForgotpassword2Body body: password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.forgotpassword_mobile_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.forgotpassword_mobile_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def forgotpassword_mobile_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Handle forgot password request from the user  # noqa: E501

        This api handles forgot password request from the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotpassword_mobile_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionForgotpassword2Body body: password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forgotpassword_mobile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `forgotpassword_mobile`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `forgotpassword_mobile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/forgotpassword2', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, version, **kwargs):  # noqa: E501
        """Fetches the details of current user  # noqa: E501

        This API fetches user_id, user_name, super_admin flag, URL of profile picture and name of current user. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool custom_data: When true, will fetch the custom data of the logged in user
        :return: GetUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_with_http_info(self, version, **kwargs):  # noqa: E501
        """Fetches the details of current user  # noqa: E501

        This API fetches user_id, user_name, super_admin flag, URL of profile picture and name of current user. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool custom_data: When true, will fetch the custom data of the logged in user
        :return: GetUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'custom_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'custom_data' in params:
            query_params.append(('custom_data', params['custom_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_mobile(self, version, **kwargs):  # noqa: E501
        """Fetches the details of current user  # noqa: E501

        This API fetches user_id, user_name, super_admin flag, URL of profile picture and name of current user. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_mobile(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool custom_data: When true, will fetch the custom data of the logged in user containing</b>.
        :return: GetUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_mobile_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_mobile_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_mobile_with_http_info(self, version, **kwargs):  # noqa: E501
        """Fetches the details of current user  # noqa: E501

        This API fetches user_id, user_name, super_admin flag, URL of profile picture and name of current user. <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output. <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_mobile_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool custom_data: When true, will fetch the custom data of the logged in user containing</b>.
        :return: GetUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'custom_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_mobile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_mobile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'custom_data' in params:
            query_params.append(('custom_data', params['custom_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login(self, body, version, **kwargs):  # noqa: E501
        """Handle login or extend session request from the user  # noqa: E501

        This API will be used by the users to Login to RainMaker or to extend an existing session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionLoginBody body: username and password for Login (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.login_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def login_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Handle login or extend session request from the user  # noqa: E501

        This API will be used by the users to Login to RainMaker or to extend an existing session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionLoginBody body: username and password for Login (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `login`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `login`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login2(self, body, version, **kwargs):  # noqa: E501
        """Handle login or extend session request from the user  # noqa: E501

        This API will be used by the users to Login to RainMaker or to extend an existing session <br>If MFA is enabled, then an SMS will be sent to the phone number after authentication with password. Then, verifying the code and session will lead to successful login of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login2(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionLogin2Body body: username and password for Login (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login2_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.login2_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def login2_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Handle login or extend session request from the user  # noqa: E501

        This API will be used by the users to Login to RainMaker or to extend an existing session <br>If MFA is enabled, then an SMS will be sent to the phone number after authentication with password. Then, verifying the code and session will lead to successful login of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login2_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionLogin2Body body: username and password for Login (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `login2`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `login2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/login2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logout(self, version, **kwargs):  # noqa: E501
        """Log out user from the session  # noqa: E501

        This API will be used by the users to Logout from Rainmaker session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str logout_all: Using this flag the user can be logged out from all sessions or only current session. The possible values are true and false.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logout_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.logout_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def logout_with_http_info(self, version, **kwargs):  # noqa: E501
        """Log out user from the session  # noqa: E501

        This API will be used by the users to Logout from Rainmaker session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str logout_all: Using this flag the user can be logged out from all sessions or only current session. The possible values are true and false.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'logout_all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `logout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'logout_all' in params:
            query_params.append(('logout_all', params['logout_all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def password(self, body, version, **kwargs):  # noqa: E501
        """Handle password change request from the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.password(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordChangeRequest body: Password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.password_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.password_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def password_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Handle password change request from the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.password_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordChangeRequest body: Password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `password`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/password', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def password_mobile(self, body, version, **kwargs):  # noqa: E501
        """Handle password change request from the user  # noqa: E501

        This api handles password change request from the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.password_mobile(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordChangeRequest body: Password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.password_mobile_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.password_mobile_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def password_mobile_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Handle password change request from the user  # noqa: E501

        This api handles password change request from the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.password_mobile_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordChangeRequest body: Password change request parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method password_mobile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `password_mobile`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `password_mobile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/password2', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userattributeupdate(self, body, version, **kwargs):  # noqa: E501
        """Updates Name and Phone number of the user  # noqa: E501

        This API sets or updates the name or phone number of the user. <br><br> MFA can also be enabled / disabled for superadmins. If MFA is enabled, an SMS with verification code is sent to the superadmin's phone number after initial authentication for successful login. <br><br><b>Note:</b> <ul><li>The verification_code will confirm the current phone_number.<li>At any point there can be just one phone number associated with the user. Adding a new phone number will replace the existing one and require reverification. <li>The MFA settings will reflect from the next login onwards.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userattributeupdate(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUser2Body body: Request body for updating name / phone number of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.userattributeupdate_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.userattributeupdate_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def userattributeupdate_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Updates Name and Phone number of the user  # noqa: E501

        This API sets or updates the name or phone number of the user. <br><br> MFA can also be enabled / disabled for superadmins. If MFA is enabled, an SMS with verification code is sent to the superadmin's phone number after initial authentication for successful login. <br><br><b>Note:</b> <ul><li>The verification_code will confirm the current phone_number.<li>At any point there can be just one phone number associated with the user. Adding a new phone number will replace the existing one and require reverification. <li>The MFA settings will reflect from the next login onwards.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userattributeupdate_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUser2Body body: Request body for updating name / phone number of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userattributeupdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `userattributeupdate`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `userattributeupdate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user2', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usercreation(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user or confirms the user  # noqa: E501

        This API creates a new user or confirms the user. If the password is specified in the request body, a new user is created and a verification code is sent to user's mail address. If the verification code is sent in the request body, the user is confirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usercreation(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUserBody body: Request body for creating new user or confirming the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.usercreation_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.usercreation_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def usercreation_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user or confirms the user  # noqa: E501

        This API creates a new user or confirms the user. If the password is specified in the request body, a new user is created and a verification code is sent to user's mail address. If the verification code is sent in the request body, the user is confirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usercreation_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUserBody body: Request body for creating new user or confirming the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usercreation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `usercreation`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `usercreation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usercreation_mobile(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user or confirms the user. The user can specify his email address or the mobile number with country code for creating his account.  # noqa: E501

        This API creates a new user or confirms the user. If the password is specified in the request body, a new user is created and a verification code is sent to user's mail address/phone number. If the verification code is sent in the request body, the user is confirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usercreation_mobile(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUser2Body1 body: Request body for creating new user or confirming the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.usercreation_mobile_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.usercreation_mobile_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def usercreation_mobile_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Creates the new user or confirms the user. The user can specify his email address or the mobile number with country code for creating his account.  # noqa: E501

        This API creates a new user or confirms the user. If the password is specified in the request body, a new user is created and a verification code is sent to user's mail address/phone number. If the verification code is sent in the request body, the user is confirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usercreation_mobile_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUser2Body1 body: Request body for creating new user or confirming the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usercreation_mobile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `usercreation_mobile`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `usercreation_mobile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userdeletion(self, version, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by end-users to delete his/her account. Here are the details- <ul> <li> If the 'request' query param is true, user delete request is initiated and verification code is sent to user using email or phone number. <li>If 'verification_code' query param is specified, user account is deleted.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userdeletion(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.userdeletion_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.userdeletion_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def userdeletion_with_http_info(self, version, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by end-users to delete his/her account. Here are the details- <ul> <li> If the 'request' query param is true, user delete request is initiated and verification code is sent to user using email or phone number. <li>If 'verification_code' query param is specified, user account is deleted.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userdeletion_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request', 'verification_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userdeletion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `userdeletion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501
        if 'verification_code' in params:
            query_params.append(('verification_code', params['verification_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userdeletion_mobile(self, version, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by end-users to delete his/her account. Here are the details- <ul> <li> If the 'request' query param is true, user delete request is initiated and verification code is sent to user using email or phone number. <li>If 'verification_code' query param is specified, user account is deleted.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userdeletion_mobile(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.userdeletion_mobile_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.userdeletion_mobile_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def userdeletion_mobile_with_http_info(self, version, **kwargs):  # noqa: E501
        """Deletes user account  # noqa: E501

        This API can be used by end-users to delete his/her account. Here are the details- <ul> <li> If the 'request' query param is true, user delete request is initiated and verification code is sent to user using email or phone number. <li>If 'verification_code' query param is specified, user account is deleted.</ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userdeletion_mobile_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param bool request: if delete user request is to be initiated, value of request param should be true.
        :param float verification_code: if delete user request is to be verified and user account is to be deleted, the verification code received by user should be entered as value of verification_code query param.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request', 'verification_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userdeletion_mobile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `userdeletion_mobile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501
        if 'verification_code' in params:
            query_params.append(('verification_code', params['verification_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user2', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usernameupdate(self, body, version, **kwargs):  # noqa: E501
        """Updates Name of the user  # noqa: E501

        This API Sets or updates the name of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usernameupdate(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateNameRequest body: Request body for updating name of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.usernameupdate_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.usernameupdate_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def usernameupdate_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Updates Name of the user  # noqa: E501

        This API Sets or updates the name of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usernameupdate_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateNameRequest body: Request body for updating name of the user (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usernameupdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `usernameupdate`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `usernameupdate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
