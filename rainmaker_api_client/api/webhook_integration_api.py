# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class WebhookIntegrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_webhook_integration(self, body, version, **kwargs):  # noqa: E501
        """This API adds new webhook for specified integration.  # noqa: E501

        This API adds new webhook for specified service name, endpoint and whether its enabled or not. <p>&nbsp; &nbsp; <strong>&nbsp;Service Name </strong> : Name of external service to be integrated</p> <p>&nbsp; &nbsp; &nbsp;<strong>Endpoint Name</strong> : A Service may have more than Webhook Endpoints. Endpoint Name of Service which we are integrating to&nbsp;</p> <p>&nbsp; &nbsp; &nbsp;<strong>Enabled</strong> : This flag tells whether this integration is enabled</p> <p>&nbsp;</p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_webhook_integration(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddWebhookIntegrationRequest body: request body for creating new Webhook Integration. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: WebhookAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_webhook_integration_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_webhook_integration_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def add_webhook_integration_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API adds new webhook for specified integration.  # noqa: E501

        This API adds new webhook for specified service name, endpoint and whether its enabled or not. <p>&nbsp; &nbsp; <strong>&nbsp;Service Name </strong> : Name of external service to be integrated</p> <p>&nbsp; &nbsp; &nbsp;<strong>Endpoint Name</strong> : A Service may have more than Webhook Endpoints. Endpoint Name of Service which we are integrating to&nbsp;</p> <p>&nbsp; &nbsp; &nbsp;<strong>Enabled</strong> : This flag tells whether this integration is enabled</p> <p>&nbsp;</p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_webhook_integration_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddWebhookIntegrationRequest body: request body for creating new Webhook Integration. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: WebhookAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_webhook_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_webhook_integration`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_webhook_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_integration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookAPISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_webhook_user_node_integration(self, version, **kwargs):  # noqa: E501
        """This API adds webhook user node integration  # noqa: E501

        This API adds the webhook for user node integration   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_webhook_user_node_integration(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param WebhookUserNodeIntegration body: request body for adding a webhook for user node integration.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_webhook_user_node_integration_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_webhook_user_node_integration_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def add_webhook_user_node_integration_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API adds webhook user node integration  # noqa: E501

        This API adds the webhook for user node integration   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_webhook_user_node_integration_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param WebhookUserNodeIntegration body: request body for adding a webhook for user node integration.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_webhook_user_node_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_webhook_user_node_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_user_node_integration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webhook_event_mapping(self, version, webhook_name, event_name, **kwargs):  # noqa: E501
        """This API removes webhook event mapping  # noqa: E501

        This API removes the webhook event mapping   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_event_mapping(version, webhook_name, event_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be removed (required)
        :param str event_name: Event to be removed (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webhook_event_mapping_with_http_info(version, webhook_name, event_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webhook_event_mapping_with_http_info(version, webhook_name, event_name, **kwargs)  # noqa: E501
            return data

    def delete_webhook_event_mapping_with_http_info(self, version, webhook_name, event_name, **kwargs):  # noqa: E501
        """This API removes webhook event mapping  # noqa: E501

        This API removes the webhook event mapping   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_event_mapping_with_http_info(version, webhook_name, event_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be removed (required)
        :param str event_name: Event to be removed (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'webhook_name', 'event_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webhook_event_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_webhook_event_mapping`")  # noqa: E501
        # verify the required parameter 'webhook_name' is set
        if ('webhook_name' not in params or
                params['webhook_name'] is None):
            raise ValueError("Missing the required parameter `webhook_name` when calling `delete_webhook_event_mapping`")  # noqa: E501
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `delete_webhook_event_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'webhook_name' in params:
            query_params.append(('webhook_name', params['webhook_name']))  # noqa: E501
        if 'event_name' in params:
            query_params.append(('event_name', params['event_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_event_mapping', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webhook_user_node_integration(self, version, webhook_name, **kwargs):  # noqa: E501
        """This API deletes webhook user node integration  # noqa: E501

        This API deletes the webhook for user node integration   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_user_node_integration(version, webhook_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be deleted (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webhook_user_node_integration_with_http_info(version, webhook_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webhook_user_node_integration_with_http_info(version, webhook_name, **kwargs)  # noqa: E501
            return data

    def delete_webhook_user_node_integration_with_http_info(self, version, webhook_name, **kwargs):  # noqa: E501
        """This API deletes webhook user node integration  # noqa: E501

        This API deletes the webhook for user node integration   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_user_node_integration_with_http_info(version, webhook_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be deleted (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'webhook_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webhook_user_node_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_webhook_user_node_integration`")  # noqa: E501
        # verify the required parameter 'webhook_name' is set
        if ('webhook_name' not in params or
                params['webhook_name'] is None):
            raise ValueError("Missing the required parameter `webhook_name` when calling `delete_webhook_user_node_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'webhook_name' in params:
            query_params.append(('webhook_name', params['webhook_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_user_node_integration', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webhook_event_mapping(self, version, **kwargs):  # noqa: E501
        """Get webhook event mapping information.  # noqa: E501

        This API will get the webhook integration mapping   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook_event_mapping(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be retrieved
        :return: GetWebhookEventMappingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_webhook_event_mapping_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_webhook_event_mapping_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_webhook_event_mapping_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get webhook event mapping information.  # noqa: E501

        This API will get the webhook integration mapping   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook_event_mapping_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be retrieved
        :return: GetWebhookEventMappingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'webhook_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webhook_event_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_webhook_event_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'webhook_name' in params:
            query_params.append(('webhook_name', params['webhook_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_event_mapping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWebhookEventMappingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webhook_integration(self, version, **kwargs):  # noqa: E501
        """Get webhook information.  # noqa: E501

        This API will get the integration information of webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook_integration(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str service_name:
        :param str endpoint_name:
        :return: GetWebhookIntegrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_webhook_integration_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_webhook_integration_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_webhook_integration_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get webhook information.  # noqa: E501

        This API will get the integration information of webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook_integration_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str service_name:
        :param str endpoint_name:
        :return: GetWebhookIntegrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'service_name', 'endpoint_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webhook_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_webhook_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'service_name' in params:
            query_params.append(('service_name', params['service_name']))  # noqa: E501
        if 'endpoint_name' in params:
            query_params.append(('endpoint_name', params['endpoint_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_integration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWebhookIntegrationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webhook_user_node_integration(self, version, **kwargs):  # noqa: E501
        """Get user node webhook integration information.  # noqa: E501

        This API will get the user node webhook integrations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook_user_node_integration(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be retrieved
        :return: GetWebhookUserNodeIntegrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_webhook_user_node_integration_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_webhook_user_node_integration_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_webhook_user_node_integration_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get user node webhook integration information.  # noqa: E501

        This API will get the user node webhook integrations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook_user_node_integration_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str webhook_name: Webhook to be retrieved
        :return: GetWebhookUserNodeIntegrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'webhook_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webhook_user_node_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_webhook_user_node_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'webhook_name' in params:
            query_params.append(('webhook_name', params['webhook_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_user_node_integration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWebhookUserNodeIntegrationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_webhook_integration(self, version, service_name, endpoint_name, **kwargs):  # noqa: E501
        """This API removes the webhooks configured for integration.  # noqa: E501

        This API allows admin to remove configured webhooks for integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_webhook_integration(version, service_name, endpoint_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str service_name: (required)
        :param str endpoint_name: (required)
        :return: WebhookAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_webhook_integration_with_http_info(version, service_name, endpoint_name, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_webhook_integration_with_http_info(version, service_name, endpoint_name, **kwargs)  # noqa: E501
            return data

    def remove_webhook_integration_with_http_info(self, version, service_name, endpoint_name, **kwargs):  # noqa: E501
        """This API removes the webhooks configured for integration.  # noqa: E501

        This API allows admin to remove configured webhooks for integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_webhook_integration_with_http_info(version, service_name, endpoint_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str service_name: (required)
        :param str endpoint_name: (required)
        :return: WebhookAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'service_name', 'endpoint_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_webhook_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_webhook_integration`")  # noqa: E501
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `remove_webhook_integration`")  # noqa: E501
        # verify the required parameter 'endpoint_name' is set
        if ('endpoint_name' not in params or
                params['endpoint_name'] is None):
            raise ValueError("Missing the required parameter `endpoint_name` when calling `remove_webhook_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'service_name' in params:
            query_params.append(('service_name', params['service_name']))  # noqa: E501
        if 'endpoint_name' in params:
            query_params.append(('endpoint_name', params['endpoint_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_integration', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookAPISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_webhook_event_mapping(self, version, **kwargs):  # noqa: E501
        """This API adds webhook event mapping  # noqa: E501

        This API adds the webhook event mapping   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_event_mapping(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param PutWebhookEventMappingRequest body: request body for adding a webhook event mapping.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_webhook_event_mapping_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_webhook_event_mapping_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def update_webhook_event_mapping_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API adds webhook event mapping  # noqa: E501

        This API adds the webhook event mapping   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_event_mapping_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param PutWebhookEventMappingRequest body: request body for adding a webhook event mapping.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_webhook_event_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_webhook_event_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_event_mapping', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_webhook_integration(self, body, version, **kwargs):  # noqa: E501
        """This API updates existing webhook configuration.  # noqa: E501

        This API updates existing webhook configuration for specified integration and its endpoint. <p>&nbsp; &nbsp; <strong>&nbsp;Service Name </strong> : Name of external service to be integrated</p> <p>&nbsp; &nbsp; &nbsp;<strong>Endpoint Name</strong> : A Service may have more than Webhook Endpoints. Endpoint Name of Service which we are integrating to&nbsp;</p> <p>&nbsp; &nbsp; &nbsp;<strong>Enabled</strong> : This flag tells whether this integration is enabled</p> <p>&nbsp;</p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_integration(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWebhookIntegrationRequest body: request body for updating existing Webhook Integration configuration. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: WebhookAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_webhook_integration_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_webhook_integration_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def update_webhook_integration_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API updates existing webhook configuration.  # noqa: E501

        This API updates existing webhook configuration for specified integration and its endpoint. <p>&nbsp; &nbsp; <strong>&nbsp;Service Name </strong> : Name of external service to be integrated</p> <p>&nbsp; &nbsp; &nbsp;<strong>Endpoint Name</strong> : A Service may have more than Webhook Endpoints. Endpoint Name of Service which we are integrating to&nbsp;</p> <p>&nbsp; &nbsp; &nbsp;<strong>Enabled</strong> : This flag tells whether this integration is enabled</p> <p>&nbsp;</p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_integration_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateWebhookIntegrationRequest body: request body for updating existing Webhook Integration configuration. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: WebhookAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_webhook_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_webhook_integration`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_webhook_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_integration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookAPISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_webhook_user_node_integration(self, operation, version, **kwargs):  # noqa: E501
        """This API updates webhook user node integration.  # noqa: E501

        This API updates the webhook for user node integration <br><br>IMPORTANT NOTES <br>- Identifiers (ex. webhook_name, event_name) cannot be updated. <br>- Only respective request body parameters according to operation will be updated. Any additional ones will be ignored. For example, if 'operation' is 'update_enabled', then only the 'enabled' parameter from request body would be updated, rest all would be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_user_node_integration(operation, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operation: Operation to be performed (Supported operations:- update_enabled, add_nodes, remove_nodes, add_event, remove_event, update_event, update_active_timestamp) (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param WebhookUserNodeIntegration body: request body for updating a webhook for user node integration.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_webhook_user_node_integration_with_http_info(operation, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_webhook_user_node_integration_with_http_info(operation, version, **kwargs)  # noqa: E501
            return data

    def update_webhook_user_node_integration_with_http_info(self, operation, version, **kwargs):  # noqa: E501
        """This API updates webhook user node integration.  # noqa: E501

        This API updates the webhook for user node integration <br><br>IMPORTANT NOTES <br>- Identifiers (ex. webhook_name, event_name) cannot be updated. <br>- Only respective request body parameters according to operation will be updated. Any additional ones will be ignored. For example, if 'operation' is 'update_enabled', then only the 'enabled' parameter from request body would be updated, rest all would be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_user_node_integration_with_http_info(operation, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operation: Operation to be performed (Supported operations:- update_enabled, add_nodes, remove_nodes, add_event, remove_event, update_event, update_active_timestamp) (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param WebhookUserNodeIntegration body: request body for updating a webhook for user node integration.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operation', 'version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_webhook_user_node_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operation' is set
        if ('operation' not in params or
                params['operation'] is None):
            raise ValueError("Missing the required parameter `operation` when calling `update_webhook_user_node_integration`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_webhook_user_node_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/webhook_user_node_integration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
