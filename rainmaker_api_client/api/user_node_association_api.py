# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class UserNodeAssociationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_remove_user_node_mapping(self, body, version, **kwargs):  # noqa: E501
        """Add or Remove the User Node mapping  # noqa: E501

        <ul> <li>You can optionally specify tags and metadata.</li> <li>Nodes can be searched by tags.</li> <li>If tags are not provided in the request, and <b>esp.location</b> is present in the user's custom_data, then all the keys starting with <b>esp</b> under it are converted to tags.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_remove_user_node_mapping(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddRemoveUserNodeMappingRequest body: Add or Remove User Node Mapping Request Parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_remove_user_node_mapping_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_remove_user_node_mapping_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def add_remove_user_node_mapping_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Add or Remove the User Node mapping  # noqa: E501

        <ul> <li>You can optionally specify tags and metadata.</li> <li>Nodes can be searched by tags.</li> <li>If tags are not provided in the request, and <b>esp.location</b> is present in the user's custom_data, then all the keys starting with <b>esp</b> under it are converted to tags.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_remove_user_node_mapping_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddRemoveUserNodeMappingRequest body: Add or Remove User Node Mapping Request Parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_remove_user_node_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_remove_user_node_mapping`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_remove_user_node_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/mapping', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_node_sharing(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Nodes between users.  # noqa: E501

        This API allows <ol> <li>Primary users to share the nodes with other users either with primary user role or secondary. User Name of the requested user and nodes are mandatory parameters. Primary flag for adding user with primary role is an optional parameter.Metadata is an optional parameter, used to store an additional info about node sharing request.</li> <li>Requested user can accept or decline the request for node sharing sent by the primary users. Here accept and request_id are mandatory parameters</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_node_sharing(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodesSharingBody body: Add User Node Sharing / Accept or Decline Sharing Request Parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_node_sharing_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_node_sharing_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def add_user_node_sharing_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Nodes between users.  # noqa: E501

        This API allows <ol> <li>Primary users to share the nodes with other users either with primary user role or secondary. User Name of the requested user and nodes are mandatory parameters. Primary flag for adding user with primary role is an optional parameter.Metadata is an optional parameter, used to store an additional info about node sharing request.</li> <li>Requested user can accept or decline the request for node sharing sent by the primary users. Here accept and request_id are mandatory parameters</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_node_sharing_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodesSharingBody body: Add User Node Sharing / Accept or Decline Sharing Request Parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_node_sharing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_node_sharing`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_user_node_sharing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/sharing', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_node_sharing_requests(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Nodes between users.  # noqa: E501

        This API allows <ol> <li>Primary users to share the nodes with other users either with primary user role or secondary. User Name of the requested user and nodes are mandatory parameters. Primary flag for adding user with primary role is an optional parameter.Metadata is an optional parameter, used to store additional info about node sharing request.</li> <li>Requested user can accept or decline the request for node sharing sent by the primary users. Here accept and request_id are mandatory parameters</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_node_sharing_requests(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharingRequestsBody body: Add User Node Sharing / Accept or Decline Sharing Request Parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_node_sharing_requests_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_node_sharing_requests_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def add_user_node_sharing_requests_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Nodes between users.  # noqa: E501

        This API allows <ol> <li>Primary users to share the nodes with other users either with primary user role or secondary. User Name of the requested user and nodes are mandatory parameters. Primary flag for adding user with primary role is an optional parameter.Metadata is an optional parameter, used to store additional info about node sharing request.</li> <li>Requested user can accept or decline the request for node sharing sent by the primary users. Here accept and request_id are mandatory parameters</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_node_sharing_requests_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharingRequestsBody body: Add User Node Sharing / Accept or Decline Sharing Request Parameters (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_node_sharing_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_node_sharing_requests`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_user_node_sharing_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/sharing/requests', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addtags(self, node_id, version, **kwargs):  # noqa: E501
        """Add tags to Node  # noqa: E501

        This api is used to attach tags to Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addtags(node_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: Used to specify nodeId (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param NodeAttachTagsRequest body: Request body for attaching tags with the node.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addtags_with_http_info(node_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.addtags_with_http_info(node_id, version, **kwargs)  # noqa: E501
            return data

    def addtags_with_http_info(self, node_id, version, **kwargs):  # noqa: E501
        """Add tags to Node  # noqa: E501

        This api is used to attach tags to Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addtags_with_http_info(node_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: Used to specify nodeId (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param NodeAttachTagsRequest body: Request body for attaching tags with the node.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addtags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `addtags`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `addtags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_admin_user_nodes(self, version, **kwargs):  # noqa: E501
        """Get the nodes claimed by the Admin user  # noqa: E501

        This API is to get the node details of nodes claimed by the admin: <li>When no parameter is passed list of all the nodes and nodeInfo are returned.</li> <li>When type is passed, list of all the nodes and nodeInfo which are of that type are returned.</li> <li>When model & type is passed, list of all the nodes and nodeInfo which are of that model & type are returned.</li> <ul><li><b>Note: type is a required parameter if model is provided.</b></li></ul> <li>When model, type & fw_version is passed, list of all the nodes and nodeInfo which are of that model, type & fw_version are returned.</li> <ul><li><b>Note: model & type is a required parameter if fw_version is provided.</b></li></ul> <li>When node status is passed, list of all the nodes and nodeInfo that have the given status are returned.</li> <ul><li>Node status can also be provided in conjunction with tags, type, model & fw_version</li></ul> <li>When node_id is passed the details of that node (NodeInfo) is returned</li> <p>To support pagination num_records and start_id are present</p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admin_user_nodes(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :param str node_id: Used to fetch details of particular node
        :param str type: Used to fetch list of nodes based on type.
        :param str model: Used to fetch list of nodes based on model and type.
        :param str fw_version: Used to fetch list of nodes based on model, type & fw_version.
        :param str tags: Used to fetch list of nodes based on tags.
        :param str node_status: Used to fetch list of nodes based on node status. They can be not_activated, online, offline, deactivated.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_admin_user_nodes_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_admin_user_nodes_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_admin_user_nodes_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get the nodes claimed by the Admin user  # noqa: E501

        This API is to get the node details of nodes claimed by the admin: <li>When no parameter is passed list of all the nodes and nodeInfo are returned.</li> <li>When type is passed, list of all the nodes and nodeInfo which are of that type are returned.</li> <li>When model & type is passed, list of all the nodes and nodeInfo which are of that model & type are returned.</li> <ul><li><b>Note: type is a required parameter if model is provided.</b></li></ul> <li>When model, type & fw_version is passed, list of all the nodes and nodeInfo which are of that model, type & fw_version are returned.</li> <ul><li><b>Note: model & type is a required parameter if fw_version is provided.</b></li></ul> <li>When node status is passed, list of all the nodes and nodeInfo that have the given status are returned.</li> <ul><li>Node status can also be provided in conjunction with tags, type, model & fw_version</li></ul> <li>When node_id is passed the details of that node (NodeInfo) is returned</li> <p>To support pagination num_records and start_id are present</p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admin_user_nodes_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str num_records: Used for pagination, number of records to be fetched
        :param str start_id: Used for pagination, Start Id of the record to be fetched
        :param str node_id: Used to fetch details of particular node
        :param str type: Used to fetch list of nodes based on type.
        :param str model: Used to fetch list of nodes based on model and type.
        :param str fw_version: Used to fetch list of nodes based on model, type & fw_version.
        :param str tags: Used to fetch list of nodes based on tags.
        :param str node_status: Used to fetch list of nodes based on node status. They can be not_activated, online, offline, deactivated.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'num_records', 'start_id', 'node_id', 'type', 'model', 'fw_version', 'tags', 'node_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_admin_user_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_admin_user_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'fw_version' in params:
            query_params.append(('fw_version', params['fw_version']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'node_status' in params:
            query_params.append(('node_status', params['node_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_status(self, version, node_id, **kwargs):  # noqa: E501
        """Get the online or offline status for the node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_status(version, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node id (required)
        :return: NodeConnectivity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_status_with_http_info(version, node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_status_with_http_info(version, node_id, **kwargs)  # noqa: E501
            return data

    def get_node_status_with_http_info(self, version, node_id, **kwargs):  # noqa: E501
        """Get the online or offline status for the node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_status_with_http_info(version, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node id (required)
        :return: NodeConnectivity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_node_status`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_node_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeConnectivity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_node_configuration(self, version, node_id, **kwargs):  # noqa: E501
        """Get the configuration for the node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_configuration(version, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node id (required)
        :return: NodeConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_node_configuration_with_http_info(version, node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_node_configuration_with_http_info(version, node_id, **kwargs)  # noqa: E501
            return data

    def get_user_node_configuration_with_http_info(self, version, node_id, **kwargs):  # noqa: E501
        """Get the configuration for the node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_configuration_with_http_info(version, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node id (required)
        :return: NodeConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_node_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_node_configuration`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_user_node_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_node_mapping_request_status(self, version, request_id, **kwargs):  # noqa: E501
        """Get the status of User Node mapping request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_mapping_request_status(version, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: request Id (required)
        :return: AddUserNodeMappingRequestStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_node_mapping_request_status_with_http_info(version, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_node_mapping_request_status_with_http_info(version, request_id, **kwargs)  # noqa: E501
            return data

    def get_user_node_mapping_request_status_with_http_info(self, version, request_id, **kwargs):  # noqa: E501
        """Get the status of User Node mapping request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_mapping_request_status_with_http_info(version, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: request Id (required)
        :return: AddUserNodeMappingRequestStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_node_mapping_request_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_node_mapping_request_status`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `get_user_node_mapping_request_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_id' in params:
            query_params.append(('request_id', params['request_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/mapping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddUserNodeMappingRequestStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_node_sharing(self, version, **kwargs):  # noqa: E501
        """This API fetches the sharing details for the nodes the current user is associated with.  # noqa: E501

        This API is used to fetch the Node sharing details. Here are the details - <ul><li>When no parameters are passed it returns the sharing details of all the nodes that this user is associated with (Primary or Secondary)</li> <li>When node_id is passed, it returns the sharing details of that node. The requesting user can be Primary or Secondary.</li> <li>If this API is called by the secondary user, the list of other secondary users this node is associated with, is not returned but the sources from where this node was shared will be returned.</li> <ul><li>When <b>NODE</b> is present in the sources array it represents that it was shared via Node sharing</li> <li>Else it was shared via Group sharing and the list will have group Ids</li></ul> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_sharing(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id of node to get the sharing details
        :return: GetUserNodeSharingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_node_sharing_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_node_sharing_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_node_sharing_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API fetches the sharing details for the nodes the current user is associated with.  # noqa: E501

        This API is used to fetch the Node sharing details. Here are the details - <ul><li>When no parameters are passed it returns the sharing details of all the nodes that this user is associated with (Primary or Secondary)</li> <li>When node_id is passed, it returns the sharing details of that node. The requesting user can be Primary or Secondary.</li> <li>If this API is called by the secondary user, the list of other secondary users this node is associated with, is not returned but the sources from where this node was shared will be returned.</li> <ul><li>When <b>NODE</b> is present in the sources array it represents that it was shared via Node sharing</li> <li>Else it was shared via Group sharing and the list will have group Ids</li></ul> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_sharing_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id of node to get the sharing details
        :return: GetUserNodeSharingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_node_sharing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_node_sharing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/sharing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserNodeSharingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_node_sharing_request(self, version, **kwargs):  # noqa: E501
        """This API is used to get the sharing requests raised between users.  # noqa: E501

        This API allows the primary and secondary users to get the sharing requests. <ol> <li>To get the requests raised by primary user, with primary_user flag set as true</li> <li>To get the requests received by secondary user</li> <li>To get the details of a request by request_id</li> </ol> To support pagination start_request_id, start_user_name, num_records are added to the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_sharing_request(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: request Id
        :param str primary_user: This is a boolean flag, which is used to denote whether to get the requests raised by Primary user(true) or received by secondary users (false). Default value for this flag is false.
        :param str start_request_id: used in pagination
        :param str start_user_name: used in pagination along with start_request_id
        :param str num_records: used to specify the no of records that must be returned. Default value is 10. The valid values are in the range of 1 to 10. If invalid value is given, default value is used.
        :return: GetNodeSharingRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_node_sharing_request_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_node_sharing_request_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_node_sharing_request_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API is used to get the sharing requests raised between users.  # noqa: E501

        This API allows the primary and secondary users to get the sharing requests. <ol> <li>To get the requests raised by primary user, with primary_user flag set as true</li> <li>To get the requests received by secondary user</li> <li>To get the details of a request by request_id</li> </ol> To support pagination start_request_id, start_user_name, num_records are added to the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_node_sharing_request_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: request Id
        :param str primary_user: This is a boolean flag, which is used to denote whether to get the requests raised by Primary user(true) or received by secondary users (false). Default value for this flag is false.
        :param str start_request_id: used in pagination
        :param str start_user_name: used in pagination along with start_request_id
        :param str num_records: used to specify the no of records that must be returned. Default value is 10. The valid values are in the range of 1 to 10. If invalid value is given, default value is used.
        :return: GetNodeSharingRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_id', 'primary_user', 'start_request_id', 'start_user_name', 'num_records']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_node_sharing_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_node_sharing_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_id' in params:
            query_params.append(('request_id', params['request_id']))  # noqa: E501
        if 'primary_user' in params:
            query_params.append(('primary_user', params['primary_user']))  # noqa: E501
        if 'start_request_id' in params:
            query_params.append(('start_request_id', params['start_request_id']))  # noqa: E501
        if 'start_user_name' in params:
            query_params.append(('start_user_name', params['start_user_name']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/sharing/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNodeSharingRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_nodes(self, version, **kwargs):  # noqa: E501
        """Get the nodes associated with the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nodes(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id of node to get the node details
        :param bool node_details: optional flag **(true/false)**, to indicate if the node details are required in the response
        :param bool status: optional flag **(true/false)**, to indicate if the node details should contain status in the response or not.
        :param bool config: optional flag **(true/false)**, to indicate if the node details should contain config in the response or not.
        :param bool params: optional flag **(true/false)**, to indicate if the node details should contain params in the response or not.
        :param str start_id: use next_id from the response as start_id to fetch the next set of records
        :param str num_records: number of nodes to fetch
        :param str tags: Used to fetch list of nodes based on tags.
        :return: GetNodesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_nodes_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_nodes_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_nodes_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get the nodes associated with the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nodes_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: node Id of node to get the node details
        :param bool node_details: optional flag **(true/false)**, to indicate if the node details are required in the response
        :param bool status: optional flag **(true/false)**, to indicate if the node details should contain status in the response or not.
        :param bool config: optional flag **(true/false)**, to indicate if the node details should contain config in the response or not.
        :param bool params: optional flag **(true/false)**, to indicate if the node details should contain params in the response or not.
        :param str start_id: use next_id from the response as start_id to fetch the next set of records
        :param str num_records: number of nodes to fetch
        :param str tags: Used to fetch list of nodes based on tags.
        :return: GetNodesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'node_id', 'node_details', 'status', 'config', 'params', 'start_id', 'num_records', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'node_details' in params:
            query_params.append(('node_details', params['node_details']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'config' in params:
            query_params.append(('config', params['config']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNodesList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_nodes_for_admins(self, version, **kwargs):  # noqa: E501
        """Get the nodes associated with a user  # noqa: E501

        This API is accessible to superadmins. Fetches the nodes associated with the user with query parameter <b>user_id</b> or <b>user_name</b>. <br>If role is specified as a query parameter (primary or secondary), then the nodes with that role are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nodes_for_admins(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_id: user_id of the user whose nodes are to be fetched.
        :param str user_name: email or phone number of the user whose nodes are to be fetched, whatever user has used to sign up. Example - username@domain.com or +<phone number with country code>
        :param str role: the nodes associated with the user returned will have this specified role. Default - both primary and secondary
        :param str start_id: use next_id from the response as start_id to fetch the next set of records
        :param str num_records: number of nodes to fetch
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_nodes_for_admins_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_nodes_for_admins_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_nodes_for_admins_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get the nodes associated with a user  # noqa: E501

        This API is accessible to superadmins. Fetches the nodes associated with the user with query parameter <b>user_id</b> or <b>user_name</b>. <br>If role is specified as a query parameter (primary or secondary), then the nodes with that role are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nodes_for_admins_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str user_id: user_id of the user whose nodes are to be fetched.
        :param str user_name: email or phone number of the user whose nodes are to be fetched, whatever user has used to sign up. Example - username@domain.com or +<phone number with country code>
        :param str role: the nodes associated with the user returned will have this specified role. Default - both primary and secondary
        :param str start_id: use next_id from the response as start_id to fetch the next set of records
        :param str num_records: number of nodes to fetch
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'user_id', 'user_name', 'role', 'start_id', 'num_records']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_nodes_for_admins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_nodes_for_admins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('user_name', params['user_name']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/user/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_user_node_sharing(self, version, nodes, user_name, **kwargs):  # noqa: E501
        """This API removes the sharing of Nodes between the users.  # noqa: E501

        This API allows the primary users to remove the sharing of nodes with other users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_node_sharing(version, nodes, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str nodes: Comma separated nodeids (Example nodes=nodeid1,nodeid2) (required)
        :param str user_name: User Name (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_user_node_sharing_with_http_info(version, nodes, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_user_node_sharing_with_http_info(version, nodes, user_name, **kwargs)  # noqa: E501
            return data

    def remove_user_node_sharing_with_http_info(self, version, nodes, user_name, **kwargs):  # noqa: E501
        """This API removes the sharing of Nodes between the users.  # noqa: E501

        This API allows the primary users to remove the sharing of nodes with other users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_node_sharing_with_http_info(version, nodes, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str nodes: Comma separated nodeids (Example nodes=nodeid1,nodeid2) (required)
        :param str user_name: User Name (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'nodes', 'user_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_node_sharing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_user_node_sharing`")  # noqa: E501
        # verify the required parameter 'nodes' is set
        if ('nodes' not in params or
                params['nodes'] is None):
            raise ValueError("Missing the required parameter `nodes` when calling `remove_user_node_sharing`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `remove_user_node_sharing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('user_name', params['user_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/sharing', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_user_node_sharing_request(self, version, request_id, **kwargs):  # noqa: E501
        """This API removes the sharing request of Nodes between the users.  # noqa: E501

        This API allows the primary users to remove the sharing request of nodes with other users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_node_sharing_request(version, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: Request Id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_user_node_sharing_request_with_http_info(version, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_user_node_sharing_request_with_http_info(version, request_id, **kwargs)  # noqa: E501
            return data

    def remove_user_node_sharing_request_with_http_info(self, version, request_id, **kwargs):  # noqa: E501
        """This API removes the sharing request of Nodes between the users.  # noqa: E501

        This API allows the primary users to remove the sharing request of nodes with other users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_node_sharing_request_with_http_info(version, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: Request Id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_node_sharing_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_user_node_sharing_request`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `remove_user_node_sharing_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_id' in params:
            query_params.append(('request_id', params['request_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/sharing/requests', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_certificate_status(self, activate, node_id, version, **kwargs):  # noqa: E501
        """Activate or Deactivate the Node  # noqa: E501

        This api is used to activate or deactivate the Node or attach tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_certificate_status(activate, node_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool activate: Used for specifying either to activate the node or deactivate the node (required)
        :param str node_id: Used to specify nodeId (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param NodeAttachTagsRequest body: Request body for attaching tags with the node.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_certificate_status_with_http_info(activate, node_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_certificate_status_with_http_info(activate, node_id, version, **kwargs)  # noqa: E501
            return data

    def update_node_certificate_status_with_http_info(self, activate, node_id, version, **kwargs):  # noqa: E501
        """Activate or Deactivate the Node  # noqa: E501

        This api is used to activate or deactivate the Node or attach tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_certificate_status_with_http_info(activate, node_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool activate: Used for specifying either to activate the node or deactivate the node (required)
        :param str node_id: Used to specify nodeId (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param NodeAttachTagsRequest body: Request body for attaching tags with the node.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activate', 'node_id', 'version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_certificate_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activate' is set
        if ('activate' not in params or
                params['activate'] is None):
            raise ValueError("Missing the required parameter `activate` when calling `update_node_certificate_status`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `update_node_certificate_status`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_node_certificate_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'activate' in params:
            query_params.append(('activate', params['activate']))  # noqa: E501
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/nodes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
