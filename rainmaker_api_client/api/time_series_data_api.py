# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class TimeSeriesDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ts_data(self, version, node_id, param_name, **kwargs):  # noqa: E501
        """This API is used to get the Time Series Data  # noqa: E501

        <p>This API is used to get the time series data for various measures like temperature, humidity, electric current, etc. reported by nodes. This information can be queried based on parameter name and aggregation interval. <br>The data can be retrieved for different aggregation intervals like minute, hour, day, week, month or year clubbed with query parameters <b>num_intervals</b> to specify the number of interval starting from today or <b>start_time and end_time</b> to specify the date and time range. <ol> <li><b>Minute</b> - Max Interval: 1 day or 1440 minutes</li> <li><b>Hour</b> - Max Interval: 1 day or 24 hours</li> <li><b>Day</b> - Max Interval: 31 days and end_time must be strictly greater than the start_time.</li> <li><b>Week</b> - Max Interval: 12 weeks. week_start parameter is used to specify the start Day of the week. Ex: Monday</li> <li><b>Month</b> - Max Interval: 12 months</li> <li><b>Year</b> - Max Interval: 5 years</li> <li><b>Raw</b> - Max Interval: 31 days</li> </ol></p> <p>Aggregates supported by different data types: <ol> <li><b>float</b> - All</li> <li><b>int</b> - All</li> <li><b>bool</b> - raw, latest, count</li> <li><b>string</b> - raw, latest, count</li> </ol></p> <p><font color='red'>Note: </font> <li>If aggregate is provided then either <b>start_time and end_time</b> or <b>num_interval</b> needs to be provided for each query.</li> <li>If aggregate is not provided then raw data is returned for last 7 days.</li> <li>The Range of data that is retrieved are [StartTime,EndTime) or [ CurrentTime - NumInterval, CurrentTime)</li> <li>When using start_id the inputs passed (apart from start_id and num_records) need to be kept the same for every call.</li> <li>Aggregate: latest is not supported for AggregationInterval: Month and Year</li> <li>When TimeZone is provided the start time and end time are also in the provided time zone</li> </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ts_data(version, node_id, param_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: This parameter is used to specify the node ID for which measures needs to be fetched. (required)
        :param str param_name: Some examples of the parameter names are - <li>temperature</li> <li>humidity</li> <li>electric_current</li> A single valid measure need to be passed. (required)
        :param str aggregate: Following aggregate functions are supported - (To be changed) <li><b>raw</b> - Returns all the actual values reported by device in given time range. This is the default value for the parameter.</li> <li><b>latest</b> - Returns the last entry reported by the device for the given aggregation interval and time range</li> <li><b>min</b> - Returns the min value reported by the device for the given aggregation interval and time range</li> <li><b>max</b> - Returns the max value reported by the device for the given aggregation interval and time range</li> <li><b>count</b> - Returns the number of values reported by the device for the given aggregation interval and time range</li> <li><b>avg</b> - Returns the avg values reported by the device for the given aggregation interval and time range</li> <br> Only one aggregate function can be specified at a time.
        :param str aggregation_interval: This parameter is used to specify the aggregation interval for the params. They can be - <li>minute</li> <li>hour</li> <li>day</li> <li>week</li> <li>month</li> <li>year</li> <p>It is not applicable when aggregate is passed as raw.</p>
        :param str type: This parameter is used to specify the data type of the param. They can be - <li>float</li> <li>int</li> <li>bool</li> <li>string</li>
        :param str week_start: This parameter is used to specify the start day of the week. This field is case insensitive. Only applicable in cases were the time_interval value is <b>week</b>.
        :param float start_time: This parameter is used to set the start time. The expected Format for start time is epoch time in seconds. Ex: 1628557200
        :param float end_time: This parameter is used to set the end time. The expected Format for end_date is epoch time in seconds. Ex: 1628557200
        :param float num_intervals: The user can specify either the start_time and end_time or num_intervals parameter. If the num_intervals is specified, then the API will fetch the data from the current time for the previous 'n' intervals. <p>i.e <br> If <i>time_interval=day, aggregate=avg, parameter_name=temperature , device_id=1234</i> <br> <i>num_intervals=5</i> <br> The output would have data for previous 5 days starting from today. Not Applicable for Aggregate=Raw.</p>
        :param str start_id: This parameter is used for pagination. <br><b>The pagination token can be used for up to 5 Query Invocations, OR for a duration of up to 1 hour whichever comes first.</b>
        :param float num_records: This parameter is used for pagination. Max Value = 200
        :param str timezone: This parameter is used to set the timezone(location) from where the query is made, based on <a href='https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'>IANA Tz Database name</a>. TimeZone can also be provided like EST but location name is preferred. This field is case-insensitive.
        :return: TSAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ts_data_with_http_info(version, node_id, param_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ts_data_with_http_info(version, node_id, param_name, **kwargs)  # noqa: E501
            return data

    def get_ts_data_with_http_info(self, version, node_id, param_name, **kwargs):  # noqa: E501
        """This API is used to get the Time Series Data  # noqa: E501

        <p>This API is used to get the time series data for various measures like temperature, humidity, electric current, etc. reported by nodes. This information can be queried based on parameter name and aggregation interval. <br>The data can be retrieved for different aggregation intervals like minute, hour, day, week, month or year clubbed with query parameters <b>num_intervals</b> to specify the number of interval starting from today or <b>start_time and end_time</b> to specify the date and time range. <ol> <li><b>Minute</b> - Max Interval: 1 day or 1440 minutes</li> <li><b>Hour</b> - Max Interval: 1 day or 24 hours</li> <li><b>Day</b> - Max Interval: 31 days and end_time must be strictly greater than the start_time.</li> <li><b>Week</b> - Max Interval: 12 weeks. week_start parameter is used to specify the start Day of the week. Ex: Monday</li> <li><b>Month</b> - Max Interval: 12 months</li> <li><b>Year</b> - Max Interval: 5 years</li> <li><b>Raw</b> - Max Interval: 31 days</li> </ol></p> <p>Aggregates supported by different data types: <ol> <li><b>float</b> - All</li> <li><b>int</b> - All</li> <li><b>bool</b> - raw, latest, count</li> <li><b>string</b> - raw, latest, count</li> </ol></p> <p><font color='red'>Note: </font> <li>If aggregate is provided then either <b>start_time and end_time</b> or <b>num_interval</b> needs to be provided for each query.</li> <li>If aggregate is not provided then raw data is returned for last 7 days.</li> <li>The Range of data that is retrieved are [StartTime,EndTime) or [ CurrentTime - NumInterval, CurrentTime)</li> <li>When using start_id the inputs passed (apart from start_id and num_records) need to be kept the same for every call.</li> <li>Aggregate: latest is not supported for AggregationInterval: Month and Year</li> <li>When TimeZone is provided the start time and end time are also in the provided time zone</li> </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ts_data_with_http_info(version, node_id, param_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str node_id: This parameter is used to specify the node ID for which measures needs to be fetched. (required)
        :param str param_name: Some examples of the parameter names are - <li>temperature</li> <li>humidity</li> <li>electric_current</li> A single valid measure need to be passed. (required)
        :param str aggregate: Following aggregate functions are supported - (To be changed) <li><b>raw</b> - Returns all the actual values reported by device in given time range. This is the default value for the parameter.</li> <li><b>latest</b> - Returns the last entry reported by the device for the given aggregation interval and time range</li> <li><b>min</b> - Returns the min value reported by the device for the given aggregation interval and time range</li> <li><b>max</b> - Returns the max value reported by the device for the given aggregation interval and time range</li> <li><b>count</b> - Returns the number of values reported by the device for the given aggregation interval and time range</li> <li><b>avg</b> - Returns the avg values reported by the device for the given aggregation interval and time range</li> <br> Only one aggregate function can be specified at a time.
        :param str aggregation_interval: This parameter is used to specify the aggregation interval for the params. They can be - <li>minute</li> <li>hour</li> <li>day</li> <li>week</li> <li>month</li> <li>year</li> <p>It is not applicable when aggregate is passed as raw.</p>
        :param str type: This parameter is used to specify the data type of the param. They can be - <li>float</li> <li>int</li> <li>bool</li> <li>string</li>
        :param str week_start: This parameter is used to specify the start day of the week. This field is case insensitive. Only applicable in cases were the time_interval value is <b>week</b>.
        :param float start_time: This parameter is used to set the start time. The expected Format for start time is epoch time in seconds. Ex: 1628557200
        :param float end_time: This parameter is used to set the end time. The expected Format for end_date is epoch time in seconds. Ex: 1628557200
        :param float num_intervals: The user can specify either the start_time and end_time or num_intervals parameter. If the num_intervals is specified, then the API will fetch the data from the current time for the previous 'n' intervals. <p>i.e <br> If <i>time_interval=day, aggregate=avg, parameter_name=temperature , device_id=1234</i> <br> <i>num_intervals=5</i> <br> The output would have data for previous 5 days starting from today. Not Applicable for Aggregate=Raw.</p>
        :param str start_id: This parameter is used for pagination. <br><b>The pagination token can be used for up to 5 Query Invocations, OR for a duration of up to 1 hour whichever comes first.</b>
        :param float num_records: This parameter is used for pagination. Max Value = 200
        :param str timezone: This parameter is used to set the timezone(location) from where the query is made, based on <a href='https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'>IANA Tz Database name</a>. TimeZone can also be provided like EST but location name is preferred. This field is case-insensitive.
        :return: TSAPISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'node_id', 'param_name', 'aggregate', 'aggregation_interval', 'type', 'week_start', 'start_time', 'end_time', 'num_intervals', 'start_id', 'num_records', 'timezone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ts_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_ts_data`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_ts_data`")  # noqa: E501
        # verify the required parameter 'param_name' is set
        if ('param_name' not in params or
                params['param_name'] is None):
            raise ValueError("Missing the required parameter `param_name` when calling `get_ts_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'param_name' in params:
            query_params.append(('param_name', params['param_name']))  # noqa: E501
        if 'aggregate' in params:
            query_params.append(('aggregate', params['aggregate']))  # noqa: E501
        if 'aggregation_interval' in params:
            query_params.append(('aggregation_interval', params['aggregation_interval']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'week_start' in params:
            query_params.append(('week_start', params['week_start']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'num_intervals' in params:
            query_params.append(('num_intervals', params['num_intervals']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/nodes/tsdata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TSAPISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
