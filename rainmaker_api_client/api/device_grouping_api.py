# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class DeviceGroupingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def acceptor_deny_user_group_sharing_requests(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Node Groups between users.  # noqa: E501

        This API allows Secondary or Primary user to accept or decline the request for node group sharing sent by the primary users.Here accept and request_id are mandatory parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acceptor_deny_user_group_sharing_requests(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AcceptOrDeclineNodeSharingRequest body: Accept or Decline Sharing Request (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.acceptor_deny_user_group_sharing_requests_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.acceptor_deny_user_group_sharing_requests_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def acceptor_deny_user_group_sharing_requests_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Node Groups between users.  # noqa: E501

        This API allows Secondary or Primary user to accept or decline the request for node group sharing sent by the primary users.Here accept and request_id are mandatory parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.acceptor_deny_user_group_sharing_requests_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AcceptOrDeclineNodeSharingRequest body: Accept or Decline Sharing Request (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acceptor_deny_user_group_sharing_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `acceptor_deny_user_group_sharing_requests`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `acceptor_deny_user_group_sharing_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group/sharing/requests', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_group_sharing(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Groups between users.  # noqa: E501

        This API allows Primary users to share the groups with other users either with primary or secondary user role. User Name of the secondary user and groups are mandatory parameters.Primary flag to make the users as primary is an optional parameter. Metadata is an optional parameter, used to store additional info about node sharing request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_group_sharing(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUserGroupSharingRequest body: Add User Group Sharing (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_group_sharing_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_group_sharing_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def add_user_group_sharing_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """This API creates the sharing of Groups between users.  # noqa: E501

        This API allows Primary users to share the groups with other users either with primary or secondary user role. User Name of the secondary user and groups are mandatory parameters.Primary flag to make the users as primary is an optional parameter. Metadata is an optional parameter, used to store additional info about node sharing request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_group_sharing_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUserGroupSharingRequest body: Add User Group Sharing (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_group_sharing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_group_sharing`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_user_group_sharing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group/sharing', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admingetdevicegroup(self, version, **kwargs):  # noqa: E501
        """Get admin device group  # noqa: E501

        This API will get the details about the admin device group. <ol><li> By Default all the groups with their sub-groups will be returned</li> <li>start_id and num_records are used for pagination of groups.</li> <li>When group_id or group_name is passed then details of that group will be returned, with nodes and subgroups.</li> <ul><li>To get node details set node_details flag to true.</li> <li>start_id and num_records are used for pagination of nodes and node_details.</li> <li>when node details is requested then nodes array will be removed from the output.</li> </ul> <li>If a group is created based on a <i>group_query</i> with some node type, model and firmware version and <b>node_model</b>, <b>node_type</b> and/or <b>node_fw_version</b> are provided, then all the groups that have the exact same <i>group_query</i> filters are returned. <br><font color='red'>Note</font> - If for any such group, some nodes' type, model or firmware version is changed, then the <b>regroup</b> option provided in the PUT API should be used.</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admingetdevicegroup(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group Id
        :param str group_name: group Name
        :param bool node_details: optional flag **(true/false)**, to indicate if the node_details is required in the response
        :param str node_type: node_type in group_query based group searching
        :param str node_model: node_model in group_query based group searching
        :param str node_fw_version: node_fw_version in group_query based group searching
        :param str start_id: This is used for the pagination
        :param str num_records: This is used for the pagination
        :return: GetAdminDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admingetdevicegroup_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.admingetdevicegroup_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def admingetdevicegroup_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get admin device group  # noqa: E501

        This API will get the details about the admin device group. <ol><li> By Default all the groups with their sub-groups will be returned</li> <li>start_id and num_records are used for pagination of groups.</li> <li>When group_id or group_name is passed then details of that group will be returned, with nodes and subgroups.</li> <ul><li>To get node details set node_details flag to true.</li> <li>start_id and num_records are used for pagination of nodes and node_details.</li> <li>when node details is requested then nodes array will be removed from the output.</li> </ul> <li>If a group is created based on a <i>group_query</i> with some node type, model and firmware version and <b>node_model</b>, <b>node_type</b> and/or <b>node_fw_version</b> are provided, then all the groups that have the exact same <i>group_query</i> filters are returned. <br><font color='red'>Note</font> - If for any such group, some nodes' type, model or firmware version is changed, then the <b>regroup</b> option provided in the PUT API should be used.</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admingetdevicegroup_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group Id
        :param str group_name: group Name
        :param bool node_details: optional flag **(true/false)**, to indicate if the node_details is required in the response
        :param str node_type: node_type in group_query based group searching
        :param str node_model: node_model in group_query based group searching
        :param str node_fw_version: node_fw_version in group_query based group searching
        :param str start_id: This is used for the pagination
        :param str num_records: This is used for the pagination
        :return: GetAdminDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'group_id', 'group_name', 'node_details', 'node_type', 'node_model', 'node_fw_version', 'start_id', 'num_records']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admingetdevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `admingetdevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'group_name' in params:
            query_params.append(('group_name', params['group_name']))  # noqa: E501
        if 'node_details' in params:
            query_params.append(('node_details', params['node_details']))  # noqa: E501
        if 'node_type' in params:
            query_params.append(('node_type', params['node_type']))  # noqa: E501
        if 'node_model' in params:
            query_params.append(('node_model', params['node_model']))  # noqa: E501
        if 'node_fw_version' in params:
            query_params.append(('node_fw_version', params['node_fw_version']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/node_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAdminDeviceGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def createdevicegroup(self, body, version, **kwargs):  # noqa: E501
        """Create admin device group  # noqa: E501

        This API will create admin device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.createdevicegroup(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminNodeGroupBody body: Request body for creating new device group. <br><br><b>Mandatory Parameters:</b> <ul><li>group_name</li></ul> <br> <b>Optional Parameters:</b> <ol><li>nodes -> the list of nodes to be added to the group. </li> <li>parent_group_id</li> <li>description</li> <li>type</li> <li>node_fw_version</li> <li>node_model</li> <li>node_type</li></ol> <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b> <br>Note: node_fw_version, node_model, node_type cannot be specified with parent_group_id and nodes. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: CreateDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.createdevicegroup_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.createdevicegroup_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def createdevicegroup_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Create admin device group  # noqa: E501

        This API will create admin device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.createdevicegroup_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminNodeGroupBody body: Request body for creating new device group. <br><br><b>Mandatory Parameters:</b> <ul><li>group_name</li></ul> <br> <b>Optional Parameters:</b> <ol><li>nodes -> the list of nodes to be added to the group. </li> <li>parent_group_id</li> <li>description</li> <li>type</li> <li>node_fw_version</li> <li>node_model</li> <li>node_type</li></ol> <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b> <br>Note: node_fw_version, node_model, node_type cannot be specified with parent_group_id and nodes. (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: CreateDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createdevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `createdevicegroup`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `createdevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/node_group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDeviceGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deletedevicegroup(self, version, group_id, **kwargs):  # noqa: E501
        """Delete admin device group  # noqa: E501

        This API will delete admin device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletedevicegroup(version, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletedevicegroup_with_http_info(version, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deletedevicegroup_with_http_info(version, group_id, **kwargs)  # noqa: E501
            return data

    def deletedevicegroup_with_http_info(self, version, group_id, **kwargs):  # noqa: E501
        """Delete admin device group  # noqa: E501

        This API will delete admin device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletedevicegroup_with_http_info(version, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletedevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `deletedevicegroup`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `deletedevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/node_group', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_group_sharing(self, version, **kwargs):  # noqa: E501
        """This API fetches the sharing details for the nodes the current user is associated with.  # noqa: E501

        This API is used to fetch the Group sharing details. Here are the details - <ul><li>When no parameters are passed it returns the sharing details of all the groups that this user is associated with (Primary or Secondary)</li> <li>When group_id is passed, it returns the sharing details of that group. The requesting user can be Primary or Secondary.</li> <li>When sub_groups is set as true(with or without groupId), it returns the sharing details of the sub groups as well. The requesting user can be Primary or Secondary.</li> <li>When parent_groups is set as true(with or without groupId), it returns the sharing details of the parent groups as well. The requesting user can be Primary or Secondary.</li> <li>If the Get group sharing API is called by the secondary user, the list of other secondary users this group is associated with, will not be returned.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_group_sharing(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group_id of group to get the sharing details
        :param bool sub_groups: When set to true returns details of sub-group as well.
        :param bool metadata: When set to true returns metadata that was set during sharing.
        :param bool parent_groups: group_id of group to get the sharing details
        :return: GetUserGroupSharingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_group_sharing_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_group_sharing_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_group_sharing_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API fetches the sharing details for the nodes the current user is associated with.  # noqa: E501

        This API is used to fetch the Group sharing details. Here are the details - <ul><li>When no parameters are passed it returns the sharing details of all the groups that this user is associated with (Primary or Secondary)</li> <li>When group_id is passed, it returns the sharing details of that group. The requesting user can be Primary or Secondary.</li> <li>When sub_groups is set as true(with or without groupId), it returns the sharing details of the sub groups as well. The requesting user can be Primary or Secondary.</li> <li>When parent_groups is set as true(with or without groupId), it returns the sharing details of the parent groups as well. The requesting user can be Primary or Secondary.</li> <li>If the Get group sharing API is called by the secondary user, the list of other secondary users this group is associated with, will not be returned.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_group_sharing_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group_id of group to get the sharing details
        :param bool sub_groups: When set to true returns details of sub-group as well.
        :param bool metadata: When set to true returns metadata that was set during sharing.
        :param bool parent_groups: group_id of group to get the sharing details
        :return: GetUserGroupSharingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'group_id', 'sub_groups', 'metadata', 'parent_groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_group_sharing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_group_sharing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'sub_groups' in params:
            query_params.append(('sub_groups', params['sub_groups']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'parent_groups' in params:
            query_params.append(('parent_groups', params['parent_groups']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group/sharing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserGroupSharingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_group_sharing_request(self, version, **kwargs):  # noqa: E501
        """This API is used to get the sharing requests raised between users.  # noqa: E501

        This API allows the primary and secondary users to get the sharing requests. <ol> <li>To get the requests raised by primary user, with primary_user flag set as true</li> <li>To get the requests received by secondary user</li> <li>To get the details of a request by request_id</li> </ol> To support pagination start_request_id, start_user_name, num_records are added to the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_group_sharing_request(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: request Id
        :param str primary_user: This is a boolean flag, which is used to denote whether to get the requests raised by Primary user(true) or received by secondary users (false). Default value for this flag is false.
        :param str start_request_id: used in pagination
        :param str start_user_name: used in pagination along with start_request_id
        :param str num_records: used to specify the no of records that must be returned. Default value is 10. The valid values are in the range of 1 to 10. If invalid value is given, default value is used.
        :return: GetGroupSharingRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_group_sharing_request_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_group_sharing_request_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_user_group_sharing_request_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API is used to get the sharing requests raised between users.  # noqa: E501

        This API allows the primary and secondary users to get the sharing requests. <ol> <li>To get the requests raised by primary user, with primary_user flag set as true</li> <li>To get the requests received by secondary user</li> <li>To get the details of a request by request_id</li> </ol> To support pagination start_request_id, start_user_name, num_records are added to the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_group_sharing_request_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: request Id
        :param str primary_user: This is a boolean flag, which is used to denote whether to get the requests raised by Primary user(true) or received by secondary users (false). Default value for this flag is false.
        :param str start_request_id: used in pagination
        :param str start_user_name: used in pagination along with start_request_id
        :param str num_records: used to specify the no of records that must be returned. Default value is 10. The valid values are in the range of 1 to 10. If invalid value is given, default value is used.
        :return: GetGroupSharingRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_id', 'primary_user', 'start_request_id', 'start_user_name', 'num_records']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_group_sharing_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_user_group_sharing_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_id' in params:
            query_params.append(('request_id', params['request_id']))  # noqa: E501
        if 'primary_user' in params:
            query_params.append(('primary_user', params['primary_user']))  # noqa: E501
        if 'start_request_id' in params:
            query_params.append(('start_request_id', params['start_request_id']))  # noqa: E501
        if 'start_user_name' in params:
            query_params.append(('start_user_name', params['start_user_name']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group/sharing/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGroupSharingRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_user_group_sharing(self, version, groups, user_name, **kwargs):  # noqa: E501
        """This API removes the sharing of Groups between the users.  # noqa: E501

        This API allows the primary users to remove the sharing of groups with other users.It also allows secondary users to remove their own sharing with the groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_group_sharing(version, groups, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str groups: Comma separated group_ids (Example groups=group_id1,group_id2) (required)
        :param str user_name: User Name (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_user_group_sharing_with_http_info(version, groups, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_user_group_sharing_with_http_info(version, groups, user_name, **kwargs)  # noqa: E501
            return data

    def remove_user_group_sharing_with_http_info(self, version, groups, user_name, **kwargs):  # noqa: E501
        """This API removes the sharing of Groups between the users.  # noqa: E501

        This API allows the primary users to remove the sharing of groups with other users.It also allows secondary users to remove their own sharing with the groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_group_sharing_with_http_info(version, groups, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str groups: Comma separated group_ids (Example groups=group_id1,group_id2) (required)
        :param str user_name: User Name (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'groups', 'user_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_group_sharing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_user_group_sharing`")  # noqa: E501
        # verify the required parameter 'groups' is set
        if ('groups' not in params or
                params['groups'] is None):
            raise ValueError("Missing the required parameter `groups` when calling `remove_user_group_sharing`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `remove_user_group_sharing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'groups' in params:
            query_params.append(('groups', params['groups']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('user_name', params['user_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group/sharing', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_user_group_sharing_request(self, version, request_id, **kwargs):  # noqa: E501
        """This API removes the sharing request of Groups between the users.  # noqa: E501

        This API allows the primary users to remove the sharing request of groups with other users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_group_sharing_request(version, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: Request Id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_user_group_sharing_request_with_http_info(version, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_user_group_sharing_request_with_http_info(version, request_id, **kwargs)  # noqa: E501
            return data

    def remove_user_group_sharing_request_with_http_info(self, version, request_id, **kwargs):  # noqa: E501
        """This API removes the sharing request of Groups between the users.  # noqa: E501

        This API allows the primary users to remove the sharing request of groups with other users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_user_group_sharing_request_with_http_info(version, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str request_id: Request Id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_group_sharing_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_user_group_sharing_request`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `remove_user_group_sharing_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_id' in params:
            query_params.append(('request_id', params['request_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group/sharing/requests', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updatedevicegroup(self, body, group_id, version, **kwargs):  # noqa: E501
        """Update admin device group  # noqa: E501

        This API will update admin device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updatedevicegroup(body, group_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAdminDeviceGroupRequest body: Request body for updating the existing node group. <ol> <li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type. <li>The value of operation can be <b>add or remove</b>. <li>While adding or removing nodes, nodes array is required to be specified in the request body. <li>For updating group name, description and type , the new values for these parameters need to be specified. <li><b>regroup</b> - this parameter is applicable to only <i>group_query</i> based groups. If a group is created based on a <i>group_query</i> and some nodes' type, model or firmware version is changed, then the <b>regroup</b> option removes nodes which no longer satisfy the <i>group_query</i> and adds newly added/updated nodes which match the <i>group_query</i>. </ol> (required)
        :param str group_id: group Id (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updatedevicegroup_with_http_info(body, group_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.updatedevicegroup_with_http_info(body, group_id, version, **kwargs)  # noqa: E501
            return data

    def updatedevicegroup_with_http_info(self, body, group_id, version, **kwargs):  # noqa: E501
        """Update admin device group  # noqa: E501

        This API will update admin device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updatedevicegroup_with_http_info(body, group_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAdminDeviceGroupRequest body: Request body for updating the existing node group. <ol> <li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type. <li>The value of operation can be <b>add or remove</b>. <li>While adding or removing nodes, nodes array is required to be specified in the request body. <li>For updating group name, description and type , the new values for these parameters need to be specified. <li><b>regroup</b> - this parameter is applicable to only <i>group_query</i> based groups. If a group is created based on a <i>group_query</i> and some nodes' type, model or firmware version is changed, then the <b>regroup</b> option removes nodes which no longer satisfy the <i>group_query</i> and adds newly added/updated nodes which match the <i>group_query</i>. </ol> (required)
        :param str group_id: group Id (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'group_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatedevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updatedevicegroup`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `updatedevicegroup`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `updatedevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/node_group', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usercreatedevicegroup(self, body, version, **kwargs):  # noqa: E501
        """Create the user device group  # noqa: E501

        This API is used for creating new node group. The maximum level for the Node Group hierarchy can be upto three.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usercreatedevicegroup(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDeviceGroupRequest body: Request body for creating new device group. <br><br><b>Mandatory Parameters:</b> <ul><li>group_name</li></ul> <br> <b>Optional Parameters:</b> <ol><li>nodes -> the list of nodes to be added to the group. </li> <li>parent_group_id</li> <li>description</li> <li>type</li></li> <li>mutually_exclusive -> When mutually_exclusive flag is true, group will be considered as Mutually exclusive group i.e Nodes which are part of this group can't be part of the other mutually exclusive groups having same group type and same parent(Groups having no parent IDs can also be considered having same parent)</ol> <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b> (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: CreateDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.usercreatedevicegroup_with_http_info(body, version, **kwargs)  # noqa: E501
        else:
            (data) = self.usercreatedevicegroup_with_http_info(body, version, **kwargs)  # noqa: E501
            return data

    def usercreatedevicegroup_with_http_info(self, body, version, **kwargs):  # noqa: E501
        """Create the user device group  # noqa: E501

        This API is used for creating new node group. The maximum level for the Node Group hierarchy can be upto three.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usercreatedevicegroup_with_http_info(body, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDeviceGroupRequest body: Request body for creating new device group. <br><br><b>Mandatory Parameters:</b> <ul><li>group_name</li></ul> <br> <b>Optional Parameters:</b> <ol><li>nodes -> the list of nodes to be added to the group. </li> <li>parent_group_id</li> <li>description</li> <li>type</li></li> <li>mutually_exclusive -> When mutually_exclusive flag is true, group will be considered as Mutually exclusive group i.e Nodes which are part of this group can't be part of the other mutually exclusive groups having same group type and same parent(Groups having no parent IDs can also be considered having same parent)</ol> <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b> (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: CreateDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usercreatedevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `usercreatedevicegroup`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `usercreatedevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDeviceGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userdeletedevicegroup(self, version, group_id, **kwargs):  # noqa: E501
        """Delete user device group  # noqa: E501

        This API will delete user device group if user is primary.It allows secondary user to remove their own sharing with the group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userdeletedevicegroup(version, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.userdeletedevicegroup_with_http_info(version, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.userdeletedevicegroup_with_http_info(version, group_id, **kwargs)  # noqa: E501
            return data

    def userdeletedevicegroup_with_http_info(self, version, group_id, **kwargs):  # noqa: E501
        """Delete user device group  # noqa: E501

        This API will delete user device group if user is primary.It allows secondary user to remove their own sharing with the group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userdeletedevicegroup_with_http_info(version, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group id (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userdeletedevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `userdeletedevicegroup`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `userdeletedevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usergetdevicegroup(self, version, **kwargs):  # noqa: E501
        """Get user device group  # noqa: E501

        This API will get the details about the user device group. <ol><li>By Default all the groups with their details will be returned</li> <li>To get list of nodes in a group or for all groups, set node_list flag to true.</li> <li>To get sub groups in a group or for all groups, set sub_groups flag to true.</li> <li>start_id and num_records are used for pagination of groups.</li> <li>When group_id is passes then details of that group will be returned.</li> <li>When group_name is passes then details of that group will be returned.</li> <ul> <li>To get node details set node_details flag to true.</li> <li>When node details is requested, the nodes array will be removed from the output.</li></ul> <li>The node_details flag is applicable only when group_id or group_name is passed</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usergetdevicegroup(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group Id
        :param str optional_group_name: group Name
        :param bool node_list: optional flag **(true/false)**, to indicate if the node list is required in the response
        :param bool sub_groups: optional flag **(true/false)**, to indicate if the sub groups list is required in the response
        :param bool node_details: optional flag **(true/false)**, to indicate if the node_details is required in the response
        :param str start_id: This is used for the pagination
        :param str num_records: This is used for the pagination
        :return: GetUserDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.usergetdevicegroup_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.usergetdevicegroup_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def usergetdevicegroup_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get user device group  # noqa: E501

        This API will get the details about the user device group. <ol><li>By Default all the groups with their details will be returned</li> <li>To get list of nodes in a group or for all groups, set node_list flag to true.</li> <li>To get sub groups in a group or for all groups, set sub_groups flag to true.</li> <li>start_id and num_records are used for pagination of groups.</li> <li>When group_id is passes then details of that group will be returned.</li> <li>When group_name is passes then details of that group will be returned.</li> <ul> <li>To get node details set node_details flag to true.</li> <li>When node details is requested, the nodes array will be removed from the output.</li></ul> <li>The node_details flag is applicable only when group_id or group_name is passed</li> </ol>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usergetdevicegroup_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str group_id: group Id
        :param str optional_group_name: group Name
        :param bool node_list: optional flag **(true/false)**, to indicate if the node list is required in the response
        :param bool sub_groups: optional flag **(true/false)**, to indicate if the sub groups list is required in the response
        :param bool node_details: optional flag **(true/false)**, to indicate if the node_details is required in the response
        :param str start_id: This is used for the pagination
        :param str num_records: This is used for the pagination
        :return: GetUserDeviceGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'group_id', 'optional_group_name', 'node_list', 'sub_groups', 'node_details', 'start_id', 'num_records']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergetdevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `usergetdevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'optional_group_name' in params:
            query_params.append(('optional group_name', params['optional_group_name']))  # noqa: E501
        if 'node_list' in params:
            query_params.append(('node_list', params['node_list']))  # noqa: E501
        if 'sub_groups' in params:
            query_params.append(('sub_groups', params['sub_groups']))  # noqa: E501
        if 'node_details' in params:
            query_params.append(('node_details', params['node_details']))  # noqa: E501
        if 'start_id' in params:
            query_params.append(('start_id', params['start_id']))  # noqa: E501
        if 'num_records' in params:
            query_params.append(('num_records', params['num_records']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserDeviceGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userupdatedevicegroup(self, body, group_id, version, **kwargs):  # noqa: E501
        """Update user device group  # noqa: E501

        This API will update user device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userupdatedevicegroup(body, group_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateDeviceGroupRequest body: Request body for updating the existing node group. <ol><li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type. <li>The value of operation can be <b>add or remove</b>. <li>While adding or removing nodes, nodes array is required to be specified in the request body. <li>For updating group name, description and type , the new values for these parameters need to be specified. <li>mutually_exclusive -> When mutually_exclusive flag is true, group will be considered as Mutually exclusive group i.e Nodes which are part of this group can't be part of the other mutually exclusive groups having same group type and same parent(Groups having no parent IDs can also be considered having same parent) (required)
        :param str group_id: group Id (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.userupdatedevicegroup_with_http_info(body, group_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.userupdatedevicegroup_with_http_info(body, group_id, version, **kwargs)  # noqa: E501
            return data

    def userupdatedevicegroup_with_http_info(self, body, group_id, version, **kwargs):  # noqa: E501
        """Update user device group  # noqa: E501

        This API will update user device group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.userupdatedevicegroup_with_http_info(body, group_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateDeviceGroupRequest body: Request body for updating the existing node group. <ol><li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type. <li>The value of operation can be <b>add or remove</b>. <li>While adding or removing nodes, nodes array is required to be specified in the request body. <li>For updating group name, description and type , the new values for these parameters need to be specified. <li>mutually_exclusive -> When mutually_exclusive flag is true, group will be considered as Mutually exclusive group i.e Nodes which are part of this group can't be part of the other mutually exclusive groups having same group type and same parent(Groups having no parent IDs can also be considered having same parent) (required)
        :param str group_id: group Id (required)
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'group_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userupdatedevicegroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `userupdatedevicegroup`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `userupdatedevicegroup`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `userupdatedevicegroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/user/node_group', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
