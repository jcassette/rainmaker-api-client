# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainmaker_api_client.api_client import ApiClient


class EventFilterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_event_filter(self, version, **kwargs):  # noqa: E501
        """This API adds event filter for given event and entity (user or node).  # noqa: E501

        This API adds new event filter for specified event type and entity id (user or node id) <br> <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node or System can be entity (Case insensitive).</p> <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId, For system it is System Event Id for that event (Please Refer following list).&nbsp;</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_event_filter(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param CreateEventFilterRequest body: request body for creating new event filter.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_event_filter_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.add_event_filter_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def add_event_filter_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API adds event filter for given event and entity (user or node).  # noqa: E501

        This API adds new event filter for specified event type and entity id (user or node id) <br> <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node or System can be entity (Case insensitive).</p> <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId, For system it is System Event Id for that event (Please Refer following list).&nbsp;</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_event_filter_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param CreateEventFilterRequest body: request body for creating new event filter.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_event_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_event_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/event_filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_filter(self, version, **kwargs):  # noqa: E501
        """Get Integration event filter information.  # noqa: E501

        This API will get the integration event filter information for given event_type and entity(type/id). <br>If the entity id(user or node id) is specified, then the event filter information will be returned for the event_type. <br>If the entity type(user or node) is specified, then all the event filter information will be returned for the event_type. <br>If just entity id(user or node id) is provided, then all the event filter mapped to that entity id will be returned. <br>Either of event_type, entity_type or entity_id is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_filter(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str event_type:
        :param str entity_type:
        :param str entity_id:
        :return: GetEventFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_event_filter_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_filter_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_event_filter_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get Integration event filter information.  # noqa: E501

        This API will get the integration event filter information for given event_type and entity(type/id). <br>If the entity id(user or node id) is specified, then the event filter information will be returned for the event_type. <br>If the entity type(user or node) is specified, then all the event filter information will be returned for the event_type. <br>If just entity id(user or node id) is provided, then all the event filter mapped to that entity id will be returned. <br>Either of event_type, entity_type or entity_id is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_filter_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param str event_type:
        :param str entity_type:
        :param str entity_id:
        :return: GetEventFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'event_type', 'entity_type', 'entity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_event_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'event_type' in params:
            query_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'entity_type' in params:
            query_params.append(('entity_type', params['entity_type']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entity_id', params['entity_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/event_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetEventFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_event_filter(self, version, **kwargs):  # noqa: E501
        """Get system event filter integration information.  # noqa: E501

        This API will get the system level integration event filter   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_event_filter(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: GetSystemEventFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_event_filter_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_system_event_filter_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def get_system_event_filter_with_http_info(self, version, **kwargs):  # noqa: E501
        """Get system event filter integration information.  # noqa: E501

        This API will get the system level integration event filter   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_event_filter_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: GetSystemEventFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_event_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_system_event_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/system_event_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSystemEventFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_event_filter(self, version, **kwargs):  # noqa: E501
        """This API removes the Integration event filter.  # noqa: E501

        This API allows admin to remove Event Filter. This api requires request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_event_filter(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_event_filter_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_event_filter_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def remove_event_filter_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API removes the Integration event filter.  # noqa: E501

        This API allows admin to remove Event Filter. This api requires request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_event_filter_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_event_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_event_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/event_filter', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_event_filter(self, version, **kwargs):  # noqa: E501
        """This API updates event filter for given event and entity (user or node)  # noqa: E501

        This API updates event filter for given event type and entity id (user or node id) <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node or System can be entity (Case insensitive).</p> <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId, For system it is System Event Id for that event (Please Refer following list).&nbsp;</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_event_filter(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param UpdateEventFilterRequest body: request body for updating event filter.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_event_filter_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_event_filter_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def update_event_filter_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API updates event filter for given event and entity (user or node)  # noqa: E501

        This API updates event filter for given event type and entity id (user or node id) <p>&nbsp; &nbsp; <strong>&nbsp;Event Type&nbsp;</strong>:&nbsp; This are Event Generated by Rainmaker System. Please refer following list of possible events.</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </strong>: rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; &nbsp;<strong>Enitity Type</strong> : User or Node or System can be entity (Case insensitive).</p> <p>&nbsp; &nbsp; &nbsp;<strong>Entity Id</strong>&nbsp; &nbsp; &nbsp; : For Entity this is its Id. For User it's userId, For node its nodeId, For system it is System Event Id for that event (Please Refer following list).&nbsp;</p> <ol> <li><strong>User Node Added&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_added</li> <li><strong>User Node Removed&nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.user_node_removed</li> <li><strong>Node Shared with User&nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_sharing_add</li> <li><strong>Node Connected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>: system.rmaker.event.node_connected</li> <li><strong>Node Disconnected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_disconnected</li> <li><strong>Node params change&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_params_changed</li> <li><strong>Node Automation Trigger&nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.node_automation_trigger</li> <li><strong>Group Shared with User &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_sharing_add</li> <li><strong>Group added &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_added</li> <li><strong>Group removed &nbsp; &nbsp; &nbsp; &nbsp; </strong>: system.rmaker.event.user_node_group_removed</li> </ol> <p>&nbsp; &nbsp; <strong>&nbsp;Enabled:</strong>&nbsp; This denotes if given Event is enabled for given EntityId.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_event_filter_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param UpdateEventFilterRequest body: request body for updating event filter.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_event_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_event_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/event_filter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_system_event_filter(self, version, **kwargs):  # noqa: E501
        """This API updates system event filter  # noqa: E501

        This API adds/removes the system event filter for the given event type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_system_event_filter(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param UpdateSystemEventFilterRequest body: request body for updating system event filter.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_system_event_filter_with_http_info(version, **kwargs)  # noqa: E501
        else:
            (data) = self.update_system_event_filter_with_http_info(version, **kwargs)  # noqa: E501
            return data

    def update_system_event_filter_with_http_info(self, version, **kwargs):  # noqa: E501
        """This API updates system event filter  # noqa: E501

        This API adds/removes the system event filter for the given event type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_system_event_filter_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: API Version (Current supported API Version is 'v1') (required)
        :param UpdateSystemEventFilterRequest body: request body for updating system event filter.
        :return: APISuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_system_event_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_system_event_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{version}/admin/system_event_filter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APISuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
