# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AcceptOrDeclineNodeSharingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirm_sharing': 'bool',
        'request_id': 'str',
        'accept': 'bool'
    }

    attribute_map = {
        'confirm_sharing': 'confirm_sharing',
        'request_id': 'request_id',
        'accept': 'accept'
    }

    def __init__(self, confirm_sharing=None, request_id=None, accept=None):  # noqa: E501
        """AcceptOrDeclineNodeSharingRequest - a model defined in Swagger"""  # noqa: E501
        self._confirm_sharing = None
        self._request_id = None
        self._accept = None
        self.discriminator = None
        if confirm_sharing is not None:
            self.confirm_sharing = confirm_sharing
        self.request_id = request_id
        self.accept = accept

    @property
    def confirm_sharing(self):
        """Gets the confirm_sharing of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501


        :return: The confirm_sharing of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501
        :rtype: bool
        """
        return self._confirm_sharing

    @confirm_sharing.setter
    def confirm_sharing(self, confirm_sharing):
        """Sets the confirm_sharing of this AcceptOrDeclineNodeSharingRequest.


        :param confirm_sharing: The confirm_sharing of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501
        :type: bool
        """

        self._confirm_sharing = confirm_sharing

    @property
    def request_id(self):
        """Gets the request_id of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501


        :return: The request_id of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AcceptOrDeclineNodeSharingRequest.


        :param request_id: The request_id of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def accept(self):
        """Gets the accept of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501


        :return: The accept of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501
        :rtype: bool
        """
        return self._accept

    @accept.setter
    def accept(self, accept):
        """Sets the accept of this AcceptOrDeclineNodeSharingRequest.


        :param accept: The accept of this AcceptOrDeclineNodeSharingRequest.  # noqa: E501
        :type: bool
        """
        if accept is None:
            raise ValueError("Invalid value for `accept`, must not be `None`")  # noqa: E501

        self._accept = accept

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AcceptOrDeclineNodeSharingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AcceptOrDeclineNodeSharingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
