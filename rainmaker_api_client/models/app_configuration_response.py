# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppConfigurationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform': 'str',
        'package_name': 'str',
        'base_api_url': 'str',
        'userpool_id': 'str',
        'region': 'str',
        'region_id': 'float',
        'client_id': 'str',
        'auth_url': 'str',
        'redirect_url': 'str'
    }

    attribute_map = {
        'platform': 'platform',
        'package_name': 'package_name',
        'base_api_url': 'base_api_url',
        'userpool_id': 'userpool_id',
        'region': 'region',
        'region_id': 'region_id',
        'client_id': 'client_id',
        'auth_url': 'auth_url',
        'redirect_url': 'redirect_url'
    }

    def __init__(self, platform=None, package_name=None, base_api_url=None, userpool_id=None, region=None, region_id=None, client_id=None, auth_url=None, redirect_url=None):  # noqa: E501
        """AppConfigurationResponse - a model defined in Swagger"""  # noqa: E501
        self._platform = None
        self._package_name = None
        self._base_api_url = None
        self._userpool_id = None
        self._region = None
        self._region_id = None
        self._client_id = None
        self._auth_url = None
        self._redirect_url = None
        self.discriminator = None
        if platform is not None:
            self.platform = platform
        if package_name is not None:
            self.package_name = package_name
        if base_api_url is not None:
            self.base_api_url = base_api_url
        if userpool_id is not None:
            self.userpool_id = userpool_id
        if region is not None:
            self.region = region
        if region_id is not None:
            self.region_id = region_id
        if client_id is not None:
            self.client_id = client_id
        if auth_url is not None:
            self.auth_url = auth_url
        if redirect_url is not None:
            self.redirect_url = redirect_url

    @property
    def platform(self):
        """Gets the platform of this AppConfigurationResponse.  # noqa: E501


        :return: The platform of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AppConfigurationResponse.


        :param platform: The platform of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def package_name(self):
        """Gets the package_name of this AppConfigurationResponse.  # noqa: E501


        :return: The package_name of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this AppConfigurationResponse.


        :param package_name: The package_name of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._package_name = package_name

    @property
    def base_api_url(self):
        """Gets the base_api_url of this AppConfigurationResponse.  # noqa: E501


        :return: The base_api_url of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._base_api_url

    @base_api_url.setter
    def base_api_url(self, base_api_url):
        """Sets the base_api_url of this AppConfigurationResponse.


        :param base_api_url: The base_api_url of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._base_api_url = base_api_url

    @property
    def userpool_id(self):
        """Gets the userpool_id of this AppConfigurationResponse.  # noqa: E501


        :return: The userpool_id of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._userpool_id

    @userpool_id.setter
    def userpool_id(self, userpool_id):
        """Sets the userpool_id of this AppConfigurationResponse.


        :param userpool_id: The userpool_id of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._userpool_id = userpool_id

    @property
    def region(self):
        """Gets the region of this AppConfigurationResponse.  # noqa: E501


        :return: The region of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AppConfigurationResponse.


        :param region: The region of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_id(self):
        """Gets the region_id of this AppConfigurationResponse.  # noqa: E501


        :return: The region_id of this AppConfigurationResponse.  # noqa: E501
        :rtype: float
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this AppConfigurationResponse.


        :param region_id: The region_id of this AppConfigurationResponse.  # noqa: E501
        :type: float
        """

        self._region_id = region_id

    @property
    def client_id(self):
        """Gets the client_id of this AppConfigurationResponse.  # noqa: E501


        :return: The client_id of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AppConfigurationResponse.


        :param client_id: The client_id of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def auth_url(self):
        """Gets the auth_url of this AppConfigurationResponse.  # noqa: E501


        :return: The auth_url of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this AppConfigurationResponse.


        :param auth_url: The auth_url of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._auth_url = auth_url

    @property
    def redirect_url(self):
        """Gets the redirect_url of this AppConfigurationResponse.  # noqa: E501


        :return: The redirect_url of this AppConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this AppConfigurationResponse.


        :param redirect_url: The redirect_url of this AppConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppConfigurationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppConfigurationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
