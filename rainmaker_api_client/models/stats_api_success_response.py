# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatsAPISuccessResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_registered_users': 'StatsObject',
        'num_registered_nodes': 'StatsObject',
        'num_users_with_nodes': 'StatsObject',
        'num_users_without_nodes': 'StatsObject',
        'num_timed_out_node_association_reqs': 'StatsObject',
        'num_claimed_nodes': 'StatsObject',
        'num_online_nodes': 'float',
        'num_offline_nodes': 'float'
    }

    attribute_map = {
        'num_registered_users': 'num_registered_users',
        'num_registered_nodes': 'num_registered_nodes',
        'num_users_with_nodes': 'num_users_with_nodes',
        'num_users_without_nodes': 'num_users_without_nodes',
        'num_timed_out_node_association_reqs': 'num_timed_out_node_association_reqs',
        'num_claimed_nodes': 'num_claimed_nodes',
        'num_online_nodes': 'num_online_nodes',
        'num_offline_nodes': 'num_offline_nodes'
    }

    def __init__(self, num_registered_users=None, num_registered_nodes=None, num_users_with_nodes=None, num_users_without_nodes=None, num_timed_out_node_association_reqs=None, num_claimed_nodes=None, num_online_nodes=None, num_offline_nodes=None):  # noqa: E501
        """StatsAPISuccessResponse - a model defined in Swagger"""  # noqa: E501
        self._num_registered_users = None
        self._num_registered_nodes = None
        self._num_users_with_nodes = None
        self._num_users_without_nodes = None
        self._num_timed_out_node_association_reqs = None
        self._num_claimed_nodes = None
        self._num_online_nodes = None
        self._num_offline_nodes = None
        self.discriminator = None
        if num_registered_users is not None:
            self.num_registered_users = num_registered_users
        if num_registered_nodes is not None:
            self.num_registered_nodes = num_registered_nodes
        if num_users_with_nodes is not None:
            self.num_users_with_nodes = num_users_with_nodes
        if num_users_without_nodes is not None:
            self.num_users_without_nodes = num_users_without_nodes
        if num_timed_out_node_association_reqs is not None:
            self.num_timed_out_node_association_reqs = num_timed_out_node_association_reqs
        if num_claimed_nodes is not None:
            self.num_claimed_nodes = num_claimed_nodes
        if num_online_nodes is not None:
            self.num_online_nodes = num_online_nodes
        if num_offline_nodes is not None:
            self.num_offline_nodes = num_offline_nodes

    @property
    def num_registered_users(self):
        """Gets the num_registered_users of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_registered_users of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: StatsObject
        """
        return self._num_registered_users

    @num_registered_users.setter
    def num_registered_users(self, num_registered_users):
        """Sets the num_registered_users of this StatsAPISuccessResponse.


        :param num_registered_users: The num_registered_users of this StatsAPISuccessResponse.  # noqa: E501
        :type: StatsObject
        """

        self._num_registered_users = num_registered_users

    @property
    def num_registered_nodes(self):
        """Gets the num_registered_nodes of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_registered_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: StatsObject
        """
        return self._num_registered_nodes

    @num_registered_nodes.setter
    def num_registered_nodes(self, num_registered_nodes):
        """Sets the num_registered_nodes of this StatsAPISuccessResponse.


        :param num_registered_nodes: The num_registered_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :type: StatsObject
        """

        self._num_registered_nodes = num_registered_nodes

    @property
    def num_users_with_nodes(self):
        """Gets the num_users_with_nodes of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_users_with_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: StatsObject
        """
        return self._num_users_with_nodes

    @num_users_with_nodes.setter
    def num_users_with_nodes(self, num_users_with_nodes):
        """Sets the num_users_with_nodes of this StatsAPISuccessResponse.


        :param num_users_with_nodes: The num_users_with_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :type: StatsObject
        """

        self._num_users_with_nodes = num_users_with_nodes

    @property
    def num_users_without_nodes(self):
        """Gets the num_users_without_nodes of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_users_without_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: StatsObject
        """
        return self._num_users_without_nodes

    @num_users_without_nodes.setter
    def num_users_without_nodes(self, num_users_without_nodes):
        """Sets the num_users_without_nodes of this StatsAPISuccessResponse.


        :param num_users_without_nodes: The num_users_without_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :type: StatsObject
        """

        self._num_users_without_nodes = num_users_without_nodes

    @property
    def num_timed_out_node_association_reqs(self):
        """Gets the num_timed_out_node_association_reqs of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_timed_out_node_association_reqs of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: StatsObject
        """
        return self._num_timed_out_node_association_reqs

    @num_timed_out_node_association_reqs.setter
    def num_timed_out_node_association_reqs(self, num_timed_out_node_association_reqs):
        """Sets the num_timed_out_node_association_reqs of this StatsAPISuccessResponse.


        :param num_timed_out_node_association_reqs: The num_timed_out_node_association_reqs of this StatsAPISuccessResponse.  # noqa: E501
        :type: StatsObject
        """

        self._num_timed_out_node_association_reqs = num_timed_out_node_association_reqs

    @property
    def num_claimed_nodes(self):
        """Gets the num_claimed_nodes of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_claimed_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: StatsObject
        """
        return self._num_claimed_nodes

    @num_claimed_nodes.setter
    def num_claimed_nodes(self, num_claimed_nodes):
        """Sets the num_claimed_nodes of this StatsAPISuccessResponse.


        :param num_claimed_nodes: The num_claimed_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :type: StatsObject
        """

        self._num_claimed_nodes = num_claimed_nodes

    @property
    def num_online_nodes(self):
        """Gets the num_online_nodes of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_online_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: float
        """
        return self._num_online_nodes

    @num_online_nodes.setter
    def num_online_nodes(self, num_online_nodes):
        """Sets the num_online_nodes of this StatsAPISuccessResponse.


        :param num_online_nodes: The num_online_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :type: float
        """

        self._num_online_nodes = num_online_nodes

    @property
    def num_offline_nodes(self):
        """Gets the num_offline_nodes of this StatsAPISuccessResponse.  # noqa: E501


        :return: The num_offline_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :rtype: float
        """
        return self._num_offline_nodes

    @num_offline_nodes.setter
    def num_offline_nodes(self, num_offline_nodes):
        """Sets the num_offline_nodes of this StatsAPISuccessResponse.


        :param num_offline_nodes: The num_offline_nodes of this StatsAPISuccessResponse.  # noqa: E501
        :type: float
        """

        self._num_offline_nodes = num_offline_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsAPISuccessResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsAPISuccessResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
