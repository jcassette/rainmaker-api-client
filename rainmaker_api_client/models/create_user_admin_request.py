# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateUserAdminRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'super_admin': 'bool',
        'admin': 'bool',
        'quota': 'float',
        'roles': 'list[str]'
    }

    attribute_map = {
        'user_name': 'user_name',
        'super_admin': 'super_admin',
        'admin': 'admin',
        'quota': 'quota',
        'roles': 'roles'
    }

    def __init__(self, user_name=None, super_admin=None, admin=None, quota=None, roles=None):  # noqa: E501
        """CreateUserAdminRequest - a model defined in Swagger"""  # noqa: E501
        self._user_name = None
        self._super_admin = None
        self._admin = None
        self._quota = None
        self._roles = None
        self.discriminator = None
        if user_name is not None:
            self.user_name = user_name
        if super_admin is not None:
            self.super_admin = super_admin
        if admin is not None:
            self.admin = admin
        if quota is not None:
            self.quota = quota
        if roles is not None:
            self.roles = roles

    @property
    def user_name(self):
        """Gets the user_name of this CreateUserAdminRequest.  # noqa: E501


        :return: The user_name of this CreateUserAdminRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CreateUserAdminRequest.


        :param user_name: The user_name of this CreateUserAdminRequest.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def super_admin(self):
        """Gets the super_admin of this CreateUserAdminRequest.  # noqa: E501


        :return: The super_admin of this CreateUserAdminRequest.  # noqa: E501
        :rtype: bool
        """
        return self._super_admin

    @super_admin.setter
    def super_admin(self, super_admin):
        """Sets the super_admin of this CreateUserAdminRequest.


        :param super_admin: The super_admin of this CreateUserAdminRequest.  # noqa: E501
        :type: bool
        """

        self._super_admin = super_admin

    @property
    def admin(self):
        """Gets the admin of this CreateUserAdminRequest.  # noqa: E501


        :return: The admin of this CreateUserAdminRequest.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this CreateUserAdminRequest.


        :param admin: The admin of this CreateUserAdminRequest.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def quota(self):
        """Gets the quota of this CreateUserAdminRequest.  # noqa: E501


        :return: The quota of this CreateUserAdminRequest.  # noqa: E501
        :rtype: float
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this CreateUserAdminRequest.


        :param quota: The quota of this CreateUserAdminRequest.  # noqa: E501
        :type: float
        """

        self._quota = quota

    @property
    def roles(self):
        """Gets the roles of this CreateUserAdminRequest.  # noqa: E501


        :return: The roles of this CreateUserAdminRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CreateUserAdminRequest.


        :param roles: The roles of this CreateUserAdminRequest.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUserAdminRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUserAdminRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
