# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatsCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'month': 'str',
        'year': 'str',
        'daily_count': 'float',
        'weekly_count': 'float',
        'monthly_count': 'float',
        'yearly_count': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'month': 'month',
        'year': 'year',
        'daily_count': 'daily_count',
        'weekly_count': 'weekly_count',
        'monthly_count': 'monthly_count',
        'yearly_count': 'yearly_count'
    }

    def __init__(self, _date=None, start_date=None, end_date=None, month=None, year=None, daily_count=None, weekly_count=None, monthly_count=None, yearly_count=None):  # noqa: E501
        """StatsCount - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._start_date = None
        self._end_date = None
        self._month = None
        self._year = None
        self._daily_count = None
        self._weekly_count = None
        self._monthly_count = None
        self._yearly_count = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if month is not None:
            self.month = month
        if year is not None:
            self.year = year
        if daily_count is not None:
            self.daily_count = daily_count
        if weekly_count is not None:
            self.weekly_count = weekly_count
        if monthly_count is not None:
            self.monthly_count = monthly_count
        if yearly_count is not None:
            self.yearly_count = yearly_count

    @property
    def _date(self):
        """Gets the _date of this StatsCount.  # noqa: E501


        :return: The _date of this StatsCount.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this StatsCount.


        :param _date: The _date of this StatsCount.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def start_date(self):
        """Gets the start_date of this StatsCount.  # noqa: E501


        :return: The start_date of this StatsCount.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this StatsCount.


        :param start_date: The start_date of this StatsCount.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this StatsCount.  # noqa: E501


        :return: The end_date of this StatsCount.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this StatsCount.


        :param end_date: The end_date of this StatsCount.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def month(self):
        """Gets the month of this StatsCount.  # noqa: E501


        :return: The month of this StatsCount.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this StatsCount.


        :param month: The month of this StatsCount.  # noqa: E501
        :type: str
        """

        self._month = month

    @property
    def year(self):
        """Gets the year of this StatsCount.  # noqa: E501


        :return: The year of this StatsCount.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this StatsCount.


        :param year: The year of this StatsCount.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def daily_count(self):
        """Gets the daily_count of this StatsCount.  # noqa: E501


        :return: The daily_count of this StatsCount.  # noqa: E501
        :rtype: float
        """
        return self._daily_count

    @daily_count.setter
    def daily_count(self, daily_count):
        """Sets the daily_count of this StatsCount.


        :param daily_count: The daily_count of this StatsCount.  # noqa: E501
        :type: float
        """

        self._daily_count = daily_count

    @property
    def weekly_count(self):
        """Gets the weekly_count of this StatsCount.  # noqa: E501


        :return: The weekly_count of this StatsCount.  # noqa: E501
        :rtype: float
        """
        return self._weekly_count

    @weekly_count.setter
    def weekly_count(self, weekly_count):
        """Sets the weekly_count of this StatsCount.


        :param weekly_count: The weekly_count of this StatsCount.  # noqa: E501
        :type: float
        """

        self._weekly_count = weekly_count

    @property
    def monthly_count(self):
        """Gets the monthly_count of this StatsCount.  # noqa: E501


        :return: The monthly_count of this StatsCount.  # noqa: E501
        :rtype: float
        """
        return self._monthly_count

    @monthly_count.setter
    def monthly_count(self, monthly_count):
        """Sets the monthly_count of this StatsCount.


        :param monthly_count: The monthly_count of this StatsCount.  # noqa: E501
        :type: float
        """

        self._monthly_count = monthly_count

    @property
    def yearly_count(self):
        """Gets the yearly_count of this StatsCount.  # noqa: E501


        :return: The yearly_count of this StatsCount.  # noqa: E501
        :rtype: float
        """
        return self._yearly_count

    @yearly_count.setter
    def yearly_count(self, yearly_count):
        """Sets the yearly_count of this StatsCount.


        :param yearly_count: The yearly_count of this StatsCount.  # noqa: E501
        :type: float
        """

        self._yearly_count = yearly_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsCount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
