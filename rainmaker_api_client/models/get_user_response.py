# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetUserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'user_name': 'str',
        'super_admin': 'bool',
        'picture_url': 'str',
        'name': 'str',
        'phone_number': 'str',
        'email': 'str',
        'quota': 'str',
        'mfa': 'bool',
        'user_roles': 'list[str]'
    }

    attribute_map = {
        'user_id': 'user_id',
        'user_name': 'user_name',
        'super_admin': 'super_admin',
        'picture_url': 'picture_url',
        'name': 'name',
        'phone_number': 'phone_number',
        'email': 'email',
        'quota': 'quota',
        'mfa': 'mfa',
        'user_roles': 'user_roles'
    }

    def __init__(self, user_id=None, user_name=None, super_admin=None, picture_url=None, name=None, phone_number=None, email=None, quota=None, mfa=None, user_roles=None):  # noqa: E501
        """GetUserResponse - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._user_name = None
        self._super_admin = None
        self._picture_url = None
        self._name = None
        self._phone_number = None
        self._email = None
        self._quota = None
        self._mfa = None
        self._user_roles = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if super_admin is not None:
            self.super_admin = super_admin
        if picture_url is not None:
            self.picture_url = picture_url
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email
        if quota is not None:
            self.quota = quota
        if mfa is not None:
            self.mfa = mfa
        if user_roles is not None:
            self.user_roles = user_roles

    @property
    def user_id(self):
        """Gets the user_id of this GetUserResponse.  # noqa: E501


        :return: The user_id of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetUserResponse.


        :param user_id: The user_id of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this GetUserResponse.  # noqa: E501


        :return: The user_name of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this GetUserResponse.


        :param user_name: The user_name of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def super_admin(self):
        """Gets the super_admin of this GetUserResponse.  # noqa: E501


        :return: The super_admin of this GetUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._super_admin

    @super_admin.setter
    def super_admin(self, super_admin):
        """Sets the super_admin of this GetUserResponse.


        :param super_admin: The super_admin of this GetUserResponse.  # noqa: E501
        :type: bool
        """

        self._super_admin = super_admin

    @property
    def picture_url(self):
        """Gets the picture_url of this GetUserResponse.  # noqa: E501


        :return: The picture_url of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this GetUserResponse.


        :param picture_url: The picture_url of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._picture_url = picture_url

    @property
    def name(self):
        """Gets the name of this GetUserResponse.  # noqa: E501


        :return: The name of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUserResponse.


        :param name: The name of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this GetUserResponse.  # noqa: E501


        :return: The phone_number of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetUserResponse.


        :param phone_number: The phone_number of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this GetUserResponse.  # noqa: E501


        :return: The email of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetUserResponse.


        :param email: The email of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def quota(self):
        """Gets the quota of this GetUserResponse.  # noqa: E501


        :return: The quota of this GetUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this GetUserResponse.


        :param quota: The quota of this GetUserResponse.  # noqa: E501
        :type: str
        """

        self._quota = quota

    @property
    def mfa(self):
        """Gets the mfa of this GetUserResponse.  # noqa: E501


        :return: The mfa of this GetUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._mfa

    @mfa.setter
    def mfa(self, mfa):
        """Sets the mfa of this GetUserResponse.


        :param mfa: The mfa of this GetUserResponse.  # noqa: E501
        :type: bool
        """

        self._mfa = mfa

    @property
    def user_roles(self):
        """Gets the user_roles of this GetUserResponse.  # noqa: E501


        :return: The user_roles of this GetUserResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this GetUserResponse.


        :param user_roles: The user_roles of this GetUserResponse.  # noqa: E501
        :type: list[str]
        """

        self._user_roles = user_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetUserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
