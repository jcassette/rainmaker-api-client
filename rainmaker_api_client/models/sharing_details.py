# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharingDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'request_status': 'str',
        'request_timestamp': 'float',
        'node_ids': 'list[str]',
        'user_name': 'str',
        'primary_user_name': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'request_id': 'request_id',
        'request_status': 'request_status',
        'request_timestamp': 'request_timestamp',
        'node_ids': 'node_ids',
        'user_name': 'user_name',
        'primary_user_name': 'primary_user_name',
        'metadata': 'metadata'
    }

    def __init__(self, request_id=None, request_status=None, request_timestamp=None, node_ids=None, user_name=None, primary_user_name=None, metadata=None):  # noqa: E501
        """SharingDetails - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._request_status = None
        self._request_timestamp = None
        self._node_ids = None
        self._user_name = None
        self._primary_user_name = None
        self._metadata = None
        self.discriminator = None
        self.request_id = request_id
        self.request_status = request_status
        self.request_timestamp = request_timestamp
        self.node_ids = node_ids
        self.user_name = user_name
        self.primary_user_name = primary_user_name
        if metadata is not None:
            self.metadata = metadata

    @property
    def request_id(self):
        """Gets the request_id of this SharingDetails.  # noqa: E501


        :return: The request_id of this SharingDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SharingDetails.


        :param request_id: The request_id of this SharingDetails.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def request_status(self):
        """Gets the request_status of this SharingDetails.  # noqa: E501


        :return: The request_status of this SharingDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status):
        """Sets the request_status of this SharingDetails.


        :param request_status: The request_status of this SharingDetails.  # noqa: E501
        :type: str
        """
        if request_status is None:
            raise ValueError("Invalid value for `request_status`, must not be `None`")  # noqa: E501

        self._request_status = request_status

    @property
    def request_timestamp(self):
        """Gets the request_timestamp of this SharingDetails.  # noqa: E501


        :return: The request_timestamp of this SharingDetails.  # noqa: E501
        :rtype: float
        """
        return self._request_timestamp

    @request_timestamp.setter
    def request_timestamp(self, request_timestamp):
        """Sets the request_timestamp of this SharingDetails.


        :param request_timestamp: The request_timestamp of this SharingDetails.  # noqa: E501
        :type: float
        """
        if request_timestamp is None:
            raise ValueError("Invalid value for `request_timestamp`, must not be `None`")  # noqa: E501

        self._request_timestamp = request_timestamp

    @property
    def node_ids(self):
        """Gets the node_ids of this SharingDetails.  # noqa: E501


        :return: The node_ids of this SharingDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_ids

    @node_ids.setter
    def node_ids(self, node_ids):
        """Sets the node_ids of this SharingDetails.


        :param node_ids: The node_ids of this SharingDetails.  # noqa: E501
        :type: list[str]
        """
        if node_ids is None:
            raise ValueError("Invalid value for `node_ids`, must not be `None`")  # noqa: E501

        self._node_ids = node_ids

    @property
    def user_name(self):
        """Gets the user_name of this SharingDetails.  # noqa: E501


        :return: The user_name of this SharingDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SharingDetails.


        :param user_name: The user_name of this SharingDetails.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def primary_user_name(self):
        """Gets the primary_user_name of this SharingDetails.  # noqa: E501


        :return: The primary_user_name of this SharingDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary_user_name

    @primary_user_name.setter
    def primary_user_name(self, primary_user_name):
        """Sets the primary_user_name of this SharingDetails.


        :param primary_user_name: The primary_user_name of this SharingDetails.  # noqa: E501
        :type: str
        """
        if primary_user_name is None:
            raise ValueError("Invalid value for `primary_user_name`, must not be `None`")  # noqa: E501

        self._primary_user_name = primary_user_name

    @property
    def metadata(self):
        """Gets the metadata of this SharingDetails.  # noqa: E501


        :return: The metadata of this SharingDetails.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SharingDetails.


        :param metadata: The metadata of this SharingDetails.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharingDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharingDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
