# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'str',
        'config_version': 'str',
        'devices': 'list[DeviceParameters]',
        'info': 'NodeConfigurationInfo'
    }

    attribute_map = {
        'node_id': 'node_id',
        'config_version': 'config_version',
        'devices': 'devices',
        'info': 'info'
    }

    def __init__(self, node_id=None, config_version=None, devices=None, info=None):  # noqa: E501
        """NodeConfiguration - a model defined in Swagger"""  # noqa: E501
        self._node_id = None
        self._config_version = None
        self._devices = None
        self._info = None
        self.discriminator = None
        if node_id is not None:
            self.node_id = node_id
        if config_version is not None:
            self.config_version = config_version
        if devices is not None:
            self.devices = devices
        if info is not None:
            self.info = info

    @property
    def node_id(self):
        """Gets the node_id of this NodeConfiguration.  # noqa: E501


        :return: The node_id of this NodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeConfiguration.


        :param node_id: The node_id of this NodeConfiguration.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def config_version(self):
        """Gets the config_version of this NodeConfiguration.  # noqa: E501


        :return: The config_version of this NodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._config_version

    @config_version.setter
    def config_version(self, config_version):
        """Sets the config_version of this NodeConfiguration.


        :param config_version: The config_version of this NodeConfiguration.  # noqa: E501
        :type: str
        """

        self._config_version = config_version

    @property
    def devices(self):
        """Gets the devices of this NodeConfiguration.  # noqa: E501


        :return: The devices of this NodeConfiguration.  # noqa: E501
        :rtype: list[DeviceParameters]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this NodeConfiguration.


        :param devices: The devices of this NodeConfiguration.  # noqa: E501
        :type: list[DeviceParameters]
        """

        self._devices = devices

    @property
    def info(self):
        """Gets the info of this NodeConfiguration.  # noqa: E501


        :return: The info of this NodeConfiguration.  # noqa: E501
        :rtype: NodeConfigurationInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this NodeConfiguration.


        :param info: The info of this NodeConfiguration.  # noqa: E501
        :type: NodeConfigurationInfo
        """

        self._info = info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
