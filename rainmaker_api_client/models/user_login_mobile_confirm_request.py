# coding: utf-8

"""
    API Definitions for RainMaker Backend Service

    This Swagger file provides the details about the RainMaker platform APIs.<br><br> There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br> The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br> For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br> When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the \"Authorization\" HTTP header as the authentication token.<br> <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices. <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>  # noqa: E501

    OpenAPI spec version: 1.1.17-fd1c887_2022-05-24T06:46
    Contact: esp-rainmaker-admin@espressif.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserLoginMobileConfirmRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'verification_code': 'str',
        'session': 'str'
    }

    attribute_map = {
        'user_name': 'user_name',
        'verification_code': 'verification_code',
        'session': 'session'
    }

    def __init__(self, user_name=None, verification_code=None, session=None):  # noqa: E501
        """UserLoginMobileConfirmRequest - a model defined in Swagger"""  # noqa: E501
        self._user_name = None
        self._verification_code = None
        self._session = None
        self.discriminator = None
        if user_name is not None:
            self.user_name = user_name
        if verification_code is not None:
            self.verification_code = verification_code
        if session is not None:
            self.session = session

    @property
    def user_name(self):
        """Gets the user_name of this UserLoginMobileConfirmRequest.  # noqa: E501


        :return: The user_name of this UserLoginMobileConfirmRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserLoginMobileConfirmRequest.


        :param user_name: The user_name of this UserLoginMobileConfirmRequest.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def verification_code(self):
        """Gets the verification_code of this UserLoginMobileConfirmRequest.  # noqa: E501


        :return: The verification_code of this UserLoginMobileConfirmRequest.  # noqa: E501
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this UserLoginMobileConfirmRequest.


        :param verification_code: The verification_code of this UserLoginMobileConfirmRequest.  # noqa: E501
        :type: str
        """

        self._verification_code = verification_code

    @property
    def session(self):
        """Gets the session of this UserLoginMobileConfirmRequest.  # noqa: E501


        :return: The session of this UserLoginMobileConfirmRequest.  # noqa: E501
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this UserLoginMobileConfirmRequest.


        :param session: The session of this UserLoginMobileConfirmRequest.  # noqa: E501
        :type: str
        """

        self._session = session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserLoginMobileConfirmRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserLoginMobileConfirmRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
